; Generated by c86 (BYU-NASM) 5.1 (beta) from int_h.i
	CPU	8086
	ALIGN	2
	jmp	main	; Jump to program start
	ALIGN	2
resetHandler:
	; >>>>> Line:	4
	; >>>>> void resetHandler(void) { 
	jmp	L_int_h_1
L_int_h_2:
	; >>>>> Line:	5
	; >>>>> exit(0); 
	xor	al, al
	push	ax
	call	exit
	add	sp, 2
	mov	sp, bp
	pop	bp
	ret
L_int_h_1:
	push	bp
	mov	bp, sp
	jmp	L_int_h_2
	ALIGN	2
L_int_h_4:
	DW	0
L_int_h_5:
	DB	"TICK ",0
	ALIGN	2
tickHandler:
	; >>>>> Line:	8
	; >>>>> void tickHandler(void) { 
	jmp	L_int_h_6
L_int_h_7:
	; >>>>> Line:	10
	; >>>>> tickCount++; 
	inc	word [L_int_h_4]
	; >>>>> Line:	12
	; >>>>> printNewLine(); 
	call	printNewLine
	; >>>>> Line:	13
	; >>>>> printString("TICK "); 
	mov	ax, L_int_h_5
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	14
	; >>>>> printInt(tickCount); 
	push	word [L_int_h_4]
	call	printInt
	add	sp, 2
	; >>>>> Line:	15
	; >>>>> printNewLine(); 
	call	printNewLine
	mov	sp, bp
	pop	bp
	ret
L_int_h_6:
	push	bp
	mov	bp, sp
	jmp	L_int_h_7
L_int_h_12:
	DB	") IGNORED",0
L_int_h_11:
	DB	"KEY PRESS (",0
L_int_h_10:
	DB	"DELAY COMPLETE",0
L_int_h_9:
	DB	"DELAY KEY PRESSED",0
	ALIGN	2
kbHandler:
	; >>>>> Line:	18
	; >>>>> void kbHandler(void) { 
	jmp	L_int_h_13
L_int_h_14:
	; >>>>> Line:	20
	; >>>>> if (KeyBuffer == 100) { 
	mov	word [bp-2], 0
	; >>>>> Line:	20
	; >>>>> if (KeyBuffer == 100) { 
	cmp	word [KeyBuffer], 100
	jne	L_int_h_15
	; >>>>> Line:	21
	; >>>>> printNewLine(); 
	call	printNewLine
	; >>>>> Line:	22
	; >>>>> printString("DELAY KEY PRESSED"); 
	mov	ax, L_int_h_9
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	23
	; >>>>> printNewLine(); 
	call	printNewLine
	; >>>>> Line:	25
	; >>>>> for (i; i < 5000; i++) { 
	jmp	L_int_h_17
L_int_h_16:
L_int_h_19:
	; >>>>> Line:	28
	; >>>>> } 
	inc	word [bp-2]
L_int_h_17:
	cmp	word [bp-2], 5000
	jl	L_int_h_16
L_int_h_18:
	; >>>>> Line:	29
	; >>>>> printNewLine(); 
	call	printNewLine
	; >>>>> Line:	30
	; >>>>> printString("DELAY COMPLETE"); 
	mov	ax, L_int_h_10
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	31
	; >>>>> printNewLine(); 
	call	printNewLine
	jmp	L_int_h_20
L_int_h_15:
	; >>>>> Line:	34
	; >>>>> printNewLine(); 
	call	printNewLine
	; >>>>> Line:	35
	; >>>>> printString 
	mov	ax, L_int_h_11
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	36
	; >>>>> printChar(KeyBuffer); 
	push	word [KeyBuffer]
	call	printChar
	add	sp, 2
	; >>>>> Line:	37
	; >>>>> printString(") IGNORED"); 
	mov	ax, L_int_h_12
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	38
	; >>>>> printNewLine(); 
	call	printNewLine
L_int_h_20:
	mov	sp, bp
	pop	bp
	ret
L_int_h_13:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_int_h_14
