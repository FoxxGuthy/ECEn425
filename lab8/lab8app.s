; Generated by c86 (BYU-NASM) 5.1 (beta) from lab8app.i
	CPU	8086
	ALIGN	2
	jmp	main	; Jump to program start
	ALIGN	2
SimpCommTask:
	; >>>>> Line:	38
	; >>>>> { 
	jmp	L_lab8app_1
L_lab8app_2:
	; >>>>> Line:	41
	; >>>>> while (1) 
	jmp	L_lab8app_4
L_lab8app_3:
	; >>>>> Line:	43
	; >>>>> YKSemPend(RCSemPtr); 
	push	word [RCSemPtr]
	call	YKSemPend
	add	sp, 2
	; >>>>> Line:	44
	; >>>>> tmp = (struct msg *) YKQPend(MsgQPtr); 
	push	word [MsgQPtr]
	call	YKQPend
	add	sp, 2
	mov	word [bp-2], ax
	; >>>>> Line:	45
	; >>>>> if(tmp->cmd == 0){ 
	mov	si, word [bp-2]
	add	si, 2
	mov	ax, word [si]
	test	ax, ax
	jne	L_lab8app_6
	; >>>>> Line:	46
	; >>>>> SlidePiece(tmp->pieceID, tmp->direction); 
	mov	si, word [bp-2]
	add	si, 4
	push	word [si]
	mov	si, word [bp-2]
	push	word [si]
	call	SlidePiece
	add	sp, 4
	jmp	L_lab8app_7
L_lab8app_6:
	; >>>>> Line:	48
	; >>>>> RotatePiece(tmp->pieceID, tmp->direction); 
	mov	si, word [bp-2]
	add	si, 4
	push	word [si]
	mov	si, word [bp-2]
	push	word [si]
	call	RotatePiece
	add	sp, 4
L_lab8app_7:
L_lab8app_4:
	jmp	L_lab8app_3
L_lab8app_5:
	mov	sp, bp
	pop	bp
	ret
L_lab8app_1:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_lab8app_2
	ALIGN	2
NewPieceTask:
	; >>>>> Line:	54
	; >>>>> { 
	jmp	L_lab8app_9
L_lab8app_10:
	; >>>>> Line:	55
	; >>>>> while(1){ 
	jmp	L_lab8app_12
L_lab8app_11:
	; >>>>> Line:	56
	; >>>>> YKSemPend(NPSemPtr); 
	push	word [NPSemPtr]
	call	YKSemPend
	add	sp, 2
L_lab8app_12:
	jmp	L_lab8app_11
L_lab8app_13:
	mov	sp, bp
	pop	bp
	ret
L_lab8app_9:
	push	bp
	mov	bp, sp
	jmp	L_lab8app_10
L_lab8app_17:
	DB	"% >",0xD,0xA,0
L_lab8app_16:
	DB	", CPU: ",0
L_lab8app_15:
	DB	"<CS: ",0
	ALIGN	2
StatsTask:
	; >>>>> Line:	62
	; >>>>> { 
	jmp	L_lab8app_18
L_lab8app_19:
	; >>>>> Line:	66
	; >>>>> YKIdleCount = 0; 
	mov	word [YKIdleCount], 0
	; >>>>> Line:	67
	; >>>>> YKDelayTask(5); 
	mov	ax, 5
	push	ax
	call	YKDelayTask
	add	sp, 2
	; >>>>> Line:	68
	; >>>>> max = YKIdleCount / 25; 
	mov	ax, word [YKIdleCount]
	cwd
	mov	cx, 25
	idiv	cx
	mov	word [bp-2], ax
	; >>>>> Line:	69
	; >>>>> YKIdleCount = 0; 
	mov	word [YKIdleCount], 0
	; >>>>> Line:	71
	; >>>>> YKNewTask(SimpCommTask, (void *) &SimpCommTaskStk[512], 30); 
	mov	al, 30
	push	ax
	mov	ax, (SimpCommTaskStk+1024)
	push	ax
	mov	ax, SimpCommTask
	push	ax
	call	YKNewTask
	add	sp, 6
	; >>>>> Line:	72
	; >>>>> YKNewTask(NewPieceTask, (void *) &NewPieceTaskStk[512], 10); 
	mov	al, 10
	push	ax
	mov	ax, (NewPieceTaskStk+1024)
	push	ax
	mov	ax, NewPieceTask
	push	ax
	call	YKNewTask
	add	sp, 6
	; >>>>> Line:	74
	; >>>>> while (1) 
	jmp	L_lab8app_21
L_lab8app_20:
	; >>>>> Line:	76
	; >>>>> YKDelayTask(20); 
	mov	ax, 20
	push	ax
	call	YKDelayTask
	add	sp, 2
	; >>>>> Line:	78
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	79
	; >>>>> switchCount = YKCtxSwCount; 
	mov	ax, word [YKCtxSwCount]
	mov	word [bp-4], ax
	; >>>>> Line:	80
	; >>>>> idleCount = YKIdleCount; 
	mov	ax, word [YKIdleCount]
	mov	word [bp-6], ax
	; >>>>> Line:	81
	; >>>>>  
	call	YKExitMutex
	; >>>>> Line:	83
	; >>>>> printString("<CS: "); 
	mov	ax, L_lab8app_15
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	84
	; >>>>> printInt((int)switchCount); 
	push	word [bp-4]
	call	printInt
	add	sp, 2
	; >>>>> Line:	85
	; >>>>> printString(", CPU: "); 
	mov	ax, L_lab8app_16
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	86
	; >>>>> tmp = (int) (idleCount/max); 
	mov	ax, word [bp-6]
	xor	dx, dx
	div	word [bp-2]
	mov	word [bp-8], ax
	; >>>>> Line:	87
	; >>>>> printInt(100-tmp); 
	mov	ax, 100
	sub	ax, word [bp-8]
	push	ax
	call	printInt
	add	sp, 2
	; >>>>> Line:	88
	; >>>>> printString("% >\r\n"); 
	mov	ax, L_lab8app_17
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	90
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	91
	; >>>>> YKCtxSwCount = 0; 
	mov	word [YKCtxSwCount], 0
	; >>>>> Line:	92
	; >>>>> YKIdleCount = 0; 
	mov	word [YKIdleCount], 0
	; >>>>> Line:	93
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
L_lab8app_21:
	jmp	L_lab8app_20
L_lab8app_22:
	mov	sp, bp
	pop	bp
	ret
L_lab8app_18:
	push	bp
	mov	bp, sp
	sub	sp, 8
	jmp	L_lab8app_19
	ALIGN	2
main:
	; >>>>> Line:	99
	; >>>>> { 
	jmp	L_lab8app_24
L_lab8app_25:
	; >>>>> Line:	100
	; >>>>> YKInitialize(); 
	call	YKInitialize
	; >>>>> Line:	102
	; >>>>> MsgQPtr = YKQCreate(MsgQ, 10); 
	mov	ax, 10
	push	ax
	mov	ax, MsgQ
	push	ax
	call	YKQCreate
	add	sp, 4
	mov	word [MsgQPtr], ax
	; >>>>> Line:	104
	; >>>>> YKNewTask(StatsTask, (void *) &StatsTaskStk[512], 50); 
	mov	al, 50
	push	ax
	mov	ax, (StatsTaskStk+1024)
	push	ax
	mov	ax, StatsTask
	push	ax
	call	YKNewTask
	add	sp, 6
	; >>>>> Line:	106
	; >>>>> SeedSimptris(10947); 
	mov	ax, 10947
	xor	dx, dx
	push	dx
	push	ax
	call	SeedSimptris
	add	sp, 4
	; >>>>> Line:	108
	; >>>>> NPSemPtr = YKSemCreate(0); 
	xor	ax, ax
	push	ax
	call	YKSemCreate
	add	sp, 2
	mov	word [NPSemPtr], ax
	; >>>>> Line:	109
	; >>>>> RCS 
	mov	ax, 1
	push	ax
	call	YKSemCreate
	add	sp, 2
	mov	word [RCSemPtr], ax
	; >>>>> Line:	111
	; >>>>> StartSimptris(); 
	call	StartSimptris
	; >>>>> Line:	112
	; >>>>> YKRun(); 
	call	YKRun
	mov	sp, bp
	pop	bp
	ret
L_lab8app_24:
	push	bp
	mov	bp, sp
	jmp	L_lab8app_25
	ALIGN	2
MsgArray:
	TIMES	120 db 0
SimpCommTaskStk:
	TIMES	1024 db 0
NewPieceTaskStk:
	TIMES	1024 db 0
StatsTaskStk:
	TIMES	1024 db 0
MsgQ:
	TIMES	20 db 0
MsgQPtr:
	TIMES	2 db 0
RCSemPtr:
	TIMES	2 db 0
NPSemPtr:
	TIMES	2 db 0
