; Generated by c86 (BYU-NASM) 5.1 (beta) from lab8app.i
	CPU	8086
	ALIGN	2
	jmp	main	; Jump to program start
	ALIGN	2
nextMsg:
	DW	0
L_lab8app_3:
	DB	"  addToQ: queue overflow! ",0xA,0
L_lab8app_2:
	DB	" DIR:",0
L_lab8app_1:
	DB	"ATQ: CMD:",0
	ALIGN	2
addToQueue:
	; >>>>> Line:	54
	; >>>>> void addToQueue(int pieceID, int cmd, int direction){ 
	jmp	L_lab8app_4
L_lab8app_5:
	; >>>>> Line:	56
	; >>>>> MsgArray[nextMsg].pieceID = pieceID; 
	mov	ax, word [nextMsg]
	mov	cx, 6
	imul	cx
	mov	si, ax
	add	si, MsgArray
	mov	ax, word [bp+4]
	mov	word [si], ax
	; >>>>> Line:	57
	; >>>>> MsgArray[nextMsg].cmd = cmd; 
	mov	ax, word [nextMsg]
	mov	cx, 6
	imul	cx
	add	ax, MsgArray
	mov	si, ax
	add	si, 2
	mov	ax, word [bp+6]
	mov	word [si], ax
	; >>>>> Line:	58
	; >>>>> MsgArray[nextMsg].direction = direction; 
	mov	ax, word [nextMsg]
	mov	cx, 6
	imul	cx
	add	ax, MsgArray
	mov	si, ax
	add	si, 4
	mov	ax, word [bp+8]
	mov	word [si], ax
	; >>>>> Line:	59
	; >>>>> if(0==1){ 
	jmp	L_lab8app_6
	; >>>>> Line:	60
	; >>>>> printString("ATQ: CMD:"); 
	mov	ax, L_lab8app_1
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	61
	; >>>>> printInt(cmd); 
	push	word [bp+6]
	call	printInt
	add	sp, 2
	; >>>>> Line:	62
	; >>>>> printString(" DIR:"); 
	mov	ax, L_lab8app_2
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	63
	; >>>>> printInt(direction); 
	push	word [bp+8]
	call	printInt
	add	sp, 2
	; >>>>> Line:	64
	; >>>>> printNewLine(); 
	call	printNewLine
L_lab8app_6:
	; >>>>> Line:	67
	; >>>>> if (YKQPost(MsgQPtr, (void *) &(MsgArray[nextMsg])) == 0) 
	mov	ax, word [nextMsg]
	mov	cx, 6
	imul	cx
	add	ax, MsgArray
	push	ax
	push	word [MsgQPtr]
	call	YKQPost
	add	sp, 4
	test	ax, ax
	jne	L_lab8app_7
	; >>>>> Line:	68
	; >>>>> printString("  addToQ: queue overflow! \n"); 
	mov	ax, L_lab8app_3
	push	ax
	call	printString
	add	sp, 2
	jmp	L_lab8app_8
L_lab8app_7:
	; >>>>> Line:	69
	; >>>>> else if (++nextMsg >= 20) 
	mov	ax, word [nextMsg]
	inc	ax
	mov	word [nextMsg], ax
	cmp	ax, 20
	jl	L_lab8app_9
	; >>>>> Line:	70
	; >>>>> nextMsg = 0; 
	mov	word [nextMsg], 0
L_lab8app_9:
L_lab8app_8:
	mov	sp, bp
	pop	bp
	ret
L_lab8app_4:
	push	bp
	mov	bp, sp
	jmp	L_lab8app_5
	ALIGN	2
setOrientation:
	; >>>>> Line:	74
	; >>>>> case 3: 
	jmp	L_lab8app_11
L_lab8app_12:
	; >>>>> Line:	77
	; >>>>> switch(dif) { 
	mov	ax, word [NewPieceOrientation]
	sub	ax, word [bp+4]
	mov	word [bp-2], ax
	; >>>>> Line:	77
	; >>>>> switch(dif) { 
	mov	ax, word [bp-2]
	sub	ax, -3
	je	L_lab8app_15
	dec	ax
	je	L_lab8app_16
	dec	ax
	je	L_lab8app_17
	dec	ax
	je	L_lab8app_18
	dec	ax
	je	L_lab8app_19
	dec	ax
	je	L_lab8app_20
	dec	ax
	je	L_lab8app_21
	jmp	L_lab8app_14
L_lab8app_15:
	; >>>>> Line:	79
	; >>>>> addToQueue(NewPieceID, 1, 1); 
	mov	ax, 1
	push	ax
	mov	ax, 1
	push	ax
	push	word [NewPieceID]
	call	addToQueue
	add	sp, 6
	; >>>>> Line:	80
	; >>>>> break; 
	jmp	L_lab8app_13
L_lab8app_16:
	; >>>>> Line:	82
	; >>>>> addToQueue(NewPieceID, 1, 0); 
	xor	ax, ax
	push	ax
	mov	ax, 1
	push	ax
	push	word [NewPieceID]
	call	addToQueue
	add	sp, 6
	; >>>>> Line:	83
	; >>>>> addToQueue(NewPieceID, 1, 0); 
	xor	ax, ax
	push	ax
	mov	ax, 1
	push	ax
	push	word [NewPieceID]
	call	addToQueue
	add	sp, 6
	; >>>>> Line:	84
	; >>>>> break; 
	jmp	L_lab8app_13
L_lab8app_17:
	; >>>>> Line:	86
	; >>>>> addToQueue(NewPieceID, 1, 0); 
	xor	ax, ax
	push	ax
	mov	ax, 1
	push	ax
	push	word [NewPieceID]
	call	addToQueue
	add	sp, 6
	; >>>>> Line:	87
	; >>>>> break; 
	jmp	L_lab8app_13
L_lab8app_18:
	; >>>>> Line:	89
	; >>>>> break; 
	jmp	L_lab8app_13
L_lab8app_19:
	; >>>>> Line:	91
	; >>>>> addToQueue(NewPieceID, 1, 1); 
	mov	ax, 1
	push	ax
	mov	ax, 1
	push	ax
	push	word [NewPieceID]
	call	addToQueue
	add	sp, 6
	; >>>>> Line:	92
	; >>>>> break; 
	jmp	L_lab8app_13
L_lab8app_20:
	; >>>>> Line:	94
	; >>>>> addToQueue(NewPieceID, 1, 1); 
	mov	ax, 1
	push	ax
	mov	ax, 1
	push	ax
	push	word [NewPieceID]
	call	addToQueue
	add	sp, 6
	; >>>>> Line:	95
	; >>>>> addToQueue(NewPieceID, 1, 1); 
	mov	ax, 1
	push	ax
	mov	ax, 1
	push	ax
	push	word [NewPieceID]
	call	addToQueue
	add	sp, 6
	; >>>>> Line:	96
	; >>>>> break; 
	jmp	L_lab8app_13
L_lab8app_21:
	; >>>>> Line:	98
	; >>>>> addToQueue(NewPieceID, 
	xor	ax, ax
	push	ax
	mov	ax, 1
	push	ax
	push	word [NewPieceID]
	call	addToQueue
	add	sp, 6
L_lab8app_14:
L_lab8app_13:
	; >>>>> Line:	99
	; >>>>> break; 
L_lab8app_22:
	; >>>>> Line:	104
	; >>>>> return ; 
	mov	sp, bp
	pop	bp
	ret
L_lab8app_11:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_lab8app_12
	ALIGN	2
setColumn:
	; >>>>> Line:	107
	; >>>>> void setColumn(int Column){ 
	jmp	L_lab8app_24
L_lab8app_25:
	; >>>>> Line:	110
	; >>>>> if(NewPieceColumn > Column){ 
	mov	word [bp-2], 0
	; >>>>> Line:	110
	; >>>>> if(NewPieceColumn > Column){ 
	mov	ax, word [NewPieceColumn]
	cmp	ax, word [bp+4]
	jbe	L_lab8app_26
	; >>>>> Line:	111
	; >>>>> dif = NewPieceColumn - Column; 
	mov	ax, word [NewPieceColumn]
	sub	ax, word [bp+4]
	mov	word [bp-4], ax
	; >>>>> Line:	112
	; >>>>> for(i=0;i<dif;i++){ 
	mov	word [bp-2], 0
	jmp	L_lab8app_28
L_lab8app_27:
	; >>>>> Line:	113
	; >>>>> addToQueue(NewPieceID, 0, 0); 
	xor	ax, ax
	push	ax
	xor	ax, ax
	push	ax
	push	word [NewPieceID]
	call	addToQueue
	add	sp, 6
L_lab8app_30:
	inc	word [bp-2]
L_lab8app_28:
	mov	ax, word [bp-4]
	cmp	ax, word [bp-2]
	jg	L_lab8app_27
L_lab8app_29:
	jmp	L_lab8app_31
L_lab8app_26:
	; >>>>> Line:	115
	; >>>>> }else if(NewPieceColumn < Column){ 
	mov	ax, word [NewPieceColumn]
	cmp	ax, word [bp+4]
	jae	L_lab8app_32
	; >>>>> Line:	116
	; >>>>> dif = Column - NewPieceColumn; 
	mov	ax, word [bp+4]
	sub	ax, word [NewPieceColumn]
	mov	word [bp-4], ax
	; >>>>> Line:	117
	; >>>>> for(i=0;i<dif;i++){ 
	mov	word [bp-2], 0
	jmp	L_lab8app_34
L_lab8app_33:
	; >>>>> Line:	118
	; >>>>> addToQueue(NewPieceID, 0, 1); 
	mov	ax, 1
	push	ax
	xor	ax, ax
	push	ax
	push	word [NewPieceID]
	call	addToQueue
	add	sp, 6
L_lab8app_36:
	inc	word [bp-2]
L_lab8app_34:
	mov	ax, word [bp-4]
	cmp	ax, word [bp-2]
	jg	L_lab8app_33
L_lab8app_35:
L_lab8app_32:
L_lab8app_31:
L_lab8app_37:
	; >>>>> Line:	123
	; >>>>> return ; 
	mov	sp, bp
	pop	bp
	ret
L_lab8app_24:
	push	bp
	mov	bp, sp
	sub	sp, 4
	jmp	L_lab8app_25
L_lab8app_40:
	DB	" D: ",0
L_lab8app_39:
	DB	"C: ",0
	ALIGN	2
SimpCommTask:
	; >>>>> Line:	127
	; >>>>> { 
	jmp	L_lab8app_41
L_lab8app_42:
	; >>>>> Line:	129
	; >>>>> while (1) 
	jmp	L_lab8app_44
L_lab8app_43:
	; >>>>> Line:	131
	; >>>>> YKSemPend(RCSemPtr); 
	push	word [RCSemPtr]
	call	YKSemPend
	add	sp, 2
	; >>>>> Line:	132
	; >>>>> tmp = (struct  
	push	word [MsgQPtr]
	call	YKQPend
	add	sp, 2
	mov	word [bp-2], ax
	; >>>>> Line:	133
	; >>>>> if(0==1){ 
	jmp	L_lab8app_46
	; >>>>> Line:	134
	; >>>>> printString("C: "); 
	mov	ax, L_lab8app_39
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	135
	; >>>>> printInt(tmp->cmd); 
	mov	si, word [bp-2]
	add	si, 2
	push	word [si]
	call	printInt
	add	sp, 2
	; >>>>> Line:	136
	; >>>>> printString(" D: "); 
	mov	ax, L_lab8app_40
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	137
	; >>>>> printInt(tmp->direction); 
	mov	si, word [bp-2]
	add	si, 4
	push	word [si]
	call	printInt
	add	sp, 2
	; >>>>> Line:	138
	; >>>>> printNewLine(); 
	call	printNewLine
L_lab8app_46:
	; >>>>> Line:	140
	; >>>>> if(tmp->cmd == 0){ 
	mov	si, word [bp-2]
	add	si, 2
	mov	ax, word [si]
	test	ax, ax
	jne	L_lab8app_47
	; >>>>> Line:	141
	; >>>>> SlidePiece(tmp->pieceID, tmp->direction); 
	mov	si, word [bp-2]
	add	si, 4
	push	word [si]
	mov	si, word [bp-2]
	push	word [si]
	call	SlidePiece
	add	sp, 4
	jmp	L_lab8app_48
L_lab8app_47:
	; >>>>> Line:	143
	; >>>>> RotatePiece(tmp->pieceID, tmp->direction); 
	mov	si, word [bp-2]
	add	si, 4
	push	word [si]
	mov	si, word [bp-2]
	push	word [si]
	call	RotatePiece
	add	sp, 4
L_lab8app_48:
L_lab8app_44:
	jmp	L_lab8app_43
L_lab8app_45:
	mov	sp, bp
	pop	bp
	ret
L_lab8app_41:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_lab8app_42
	ALIGN	2
getFirstOne:
	; >>>>> Line:	148
	; >>>>> int getFirstOne(int column){ 
	jmp	L_lab8app_50
L_lab8app_51:
	; >>>>> Line:	152
	; >>>>> for(i=15;i>=0;i--){ 
	mov	word [bp-4], 1
	; >>>>> Line:	152
	; >>>>> for(i=15;i>=0;i--){ 
	mov	word [bp-2], 15
	jmp	L_lab8app_53
L_lab8app_52:
	; >>>>> Line:	153
	; >>>>> if((tmp & column)==tmp){ 
	mov	ax, word [bp-4]
	and	ax, word [bp+4]
	mov	dx, word [bp-4]
	cmp	dx, ax
	jne	L_lab8app_56
	; >>>>> Line:	154
	; >>>>> return i+1; 
	mov	ax, word [bp-2]
	inc	ax
	jmp	L_lab8app_57
	jmp	L_lab8app_58
L_lab8app_56:
	; >>>>> Line:	156
	; >>>>> tmp = tmp<<1; 
	mov	ax, word [bp-4]
	shl	ax, 1
	mov	word [bp-4], ax
L_lab8app_58:
L_lab8app_55:
	dec	word [bp-2]
L_lab8app_53:
	cmp	word [bp-2], 0
	jge	L_lab8app_52
L_lab8app_54:
	; >>>>> Line:	159
	; >>>>> return i+1; 
	mov	ax, word [bp-2]
	inc	ax
L_lab8app_57:
	mov	sp, bp
	pop	bp
	ret
L_lab8app_50:
	push	bp
	mov	bp, sp
	sub	sp, 4
	jmp	L_lab8app_51
L_lab8app_62:
	DB	" B1:",0
L_lab8app_61:
	DB	"B0:",0
L_lab8app_60:
	DB	"NP NPTSK ",0xD,0xA,0
	ALIGN	2
NewPieceTask:
	; >>>>> Line:	163
	; >>>>> { 
	jmp	L_lab8app_63
L_lab8app_64:
	; >>>>> Line:	173
	; >>>>> while(1){ 
	mov	byte [bp-13], 0
	mov	byte [bp-14], 0
	; >>>>> Line:	173
	; >>>>> while(1){ 
	jmp	L_lab8app_66
L_lab8app_65:
	; >>>>> Line:	174
	; >>>>> YKSemPend(NPSemPtr); 
	push	word [NPSemPtr]
	call	YKSemPend
	add	sp, 2
	; >>>>> Line:	175
	; >>>>> if(0==1){ 
	jmp	L_lab8app_68
	; >>>>> Line:	176
	; >>>>> printString("NP NPTSK \r\n"); 
	mov	ax, L_lab8app_60
	push	ax
	call	printString
	add	sp, 2
L_lab8app_68:
	; >>>>> Line:	178
	; >>>>> YKSemPend(TDSemPtr); 
	push	word [TDSemPtr]
	call	YKSemPend
	add	sp, 2
	; >>>>> Line:	179
	; >>>>> col0Level = getFirstOne(ScreenBitMap0); 
	push	word [ScreenBitMap0]
	call	getFirstOne
	add	sp, 2
	mov	word [bp-2], ax
	; >>>>> Line:	180
	; >>>>> col1Level = getFirstOne(ScreenBitMap1); 
	push	word [ScreenBitMap1]
	call	getFirstOne
	add	sp, 2
	mov	word [bp-4], ax
	; >>>>> Line:	181
	; >>>>> col2Level = getFirstOne(ScreenBitMap2); 
	push	word [ScreenBitMap2]
	call	getFirstOne
	add	sp, 2
	mov	word [bp-6], ax
	; >>>>> Line:	182
	; >>>>> col3Level = getFirstOne(ScreenBitMap3); 
	push	word [ScreenBitMap3]
	call	getFirstOne
	add	sp, 2
	mov	word [bp-8], ax
	; >>>>> Line:	183
	; >>>>> col4Level = getFirstOne(ScreenBitMap4); 
	push	word [ScreenBitMap4]
	call	getFirstOne
	add	sp, 2
	mov	word [bp-10], ax
	; >>>>> Line:	184
	; >>>>> col5Level = getFirstOne(Screen 
	push	word [ScreenBitMap5]
	call	getFirstOne
	add	sp, 2
	mov	word [bp-12], ax
	; >>>>> Line:	185
	; >>>>> if(0==1){ 
	jmp	L_lab8app_69
	; >>>>> Line:	186
	; >>>>> printInt(col0Level); 
	push	word [bp-2]
	call	printInt
	add	sp, 2
	; >>>>> Line:	187
	; >>>>> printInt(col1Level); 
	push	word [bp-4]
	call	printInt
	add	sp, 2
	; >>>>> Line:	188
	; >>>>> printInt(col2Level); 
	push	word [bp-6]
	call	printInt
	add	sp, 2
	; >>>>> Line:	189
	; >>>>> printInt(col3Level); 
	push	word [bp-8]
	call	printInt
	add	sp, 2
	; >>>>> Line:	190
	; >>>>> printInt(col4Level); 
	push	word [bp-10]
	call	printInt
	add	sp, 2
	; >>>>> Line:	191
	; >>>>> printInt(col5Level); 
	push	word [bp-12]
	call	printInt
	add	sp, 2
	; >>>>> Line:	192
	; >>>>> printNewLine(); 
	call	printNewLine
L_lab8app_69:
	; >>>>> Line:	194
	; >>>>> if((col0Level == col1Level) && (col1Level==col2Level)){ 
	mov	ax, word [bp-4]
	cmp	ax, word [bp-2]
	jne	L_lab8app_70
	mov	ax, word [bp-6]
	cmp	ax, word [bp-4]
	jne	L_lab8app_70
	; >>>>> Line:	195
	; >>>>> bin0 = 0; 
	mov	byte [bp-13], 0
	jmp	L_lab8app_71
L_lab8app_70:
	; >>>>> Line:	197
	; >>>>> bin0 = 1; 
	mov	byte [bp-13], 1
L_lab8app_71:
	; >>>>> Line:	199
	; >>>>> if((col3Level == col4Level) && (col4Level==col5Level)){ 
	mov	ax, word [bp-10]
	cmp	ax, word [bp-8]
	jne	L_lab8app_72
	mov	ax, word [bp-12]
	cmp	ax, word [bp-10]
	jne	L_lab8app_72
	; >>>>> Line:	200
	; >>>>> bin1 = 0; 
	mov	byte [bp-14], 0
	jmp	L_lab8app_73
L_lab8app_72:
	; >>>>> Line:	202
	; >>>>> bin1 = 1; 
	mov	byte [bp-14], 1
L_lab8app_73:
	; >>>>> Line:	204
	; >>>>> if(0==1){ 
	jmp	L_lab8app_74
	; >>>>> Line:	205
	; >>>>> printString("B0:"); 
	mov	ax, L_lab8app_61
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	206
	; >>>>> printInt(bin0); 
	mov	al, byte [bp-13]
	cbw
	push	ax
	call	printInt
	add	sp, 2
	; >>>>> Line:	207
	; >>>>> printString( 
	mov	ax, L_lab8app_62
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	208
	; >>>>> printInt(bin1); 
	mov	al, byte [bp-14]
	cbw
	push	ax
	call	printInt
	add	sp, 2
	; >>>>> Line:	209
	; >>>>> printNewLine(); 
	call	printNewLine
L_lab8app_74:
	; >>>>> Line:	212
	; >>>>> if(NewPieceColumn==0){ 
	mov	ax, word [NewPieceColumn]
	test	ax, ax
	jne	L_lab8app_75
	; >>>>> Line:	213
	; >>>>> setColumn(1); 
	mov	ax, 1
	push	ax
	call	setColumn
	add	sp, 2
	; >>>>> Line:	214
	; >>>>> NewPieceColumn = 1; 
	mov	word [NewPieceColumn], 1
	jmp	L_lab8app_76
L_lab8app_75:
	; >>>>> Line:	215
	; >>>>> }else if(NewPieceColumn==5){ 
	cmp	word [NewPieceColumn], 5
	jne	L_lab8app_77
	; >>>>> Line:	216
	; >>>>> setColumn(4); 
	mov	ax, 4
	push	ax
	call	setColumn
	add	sp, 2
	; >>>>> Line:	217
	; >>>>> NewPieceColumn = 4; 
	mov	word [NewPieceColumn], 4
L_lab8app_77:
L_lab8app_76:
	; >>>>> Line:	220
	; >>>>> if(NewPieceType==1){ 
	cmp	word [NewPieceType], 1
	jne	L_lab8app_78
	; >>>>> Line:	222
	; >>>>> if(NewPieceOrientation==1){ 
	cmp	word [NewPieceOrientation], 1
	jne	L_lab8app_79
	; >>>>> Line:	223
	; >>>>> addToQueue(NewPieceID, 1, 1); 
	mov	ax, 1
	push	ax
	mov	ax, 1
	push	ax
	push	word [NewPieceID]
	call	addToQueue
	add	sp, 6
L_lab8app_79:
	; >>>>> Line:	225
	; >>>>> if(bin0==0 && bin1==0){ 
	mov	al, byte [bp-13]
	test	al, al
	jne	L_lab8app_80
	mov	al, byte [bp-14]
	test	al, al
	jne	L_lab8app_80
	; >>>>> Line:	226
	; >>>>> if(col0Level < col5Level){ 
	mov	ax, word [bp-12]
	cmp	ax, word [bp-2]
	jle	L_lab8app_81
	; >>>>> Line:	227
	; >>>>> setColumn(1); 
	mov	ax, 1
	push	ax
	call	setColumn
	add	sp, 2
	jmp	L_lab8app_82
L_lab8app_81:
	; >>>>> Line:	229
	; >>>>> setColumn(4); 
	mov	ax, 4
	push	ax
	call	setColumn
	add	sp, 2
L_lab8app_82:
	jmp	L_lab8app_83
L_lab8app_80:
	; >>>>> Line:	233
	; >>>>> if(bin0==0){ 
	mov	al, byte [bp-13]
	test	al, al
	jne	L_lab8app_84
	; >>>>> Line:	234
	; >>>>> leCount; 
	mov	ax, 1
	push	ax
	call	setColumn
	add	sp, 2
	jmp	L_lab8app_85
L_lab8app_84:
	; >>>>> Line:	236
	; >>>>> setColumn(4); 
	mov	ax, 4
	push	ax
	call	setColumn
	add	sp, 2
L_lab8app_85:
L_lab8app_83:
	jmp	L_lab8app_86
L_lab8app_78:
	; >>>>> Line:	242
	; >>>>> if((bin0==0) && (bin1==0)){ 
	mov	al, byte [bp-13]
	test	al, al
	jne	L_lab8app_87
	mov	al, byte [bp-14]
	test	al, al
	jne	L_lab8app_87
	; >>>>> Line:	243
	; >>>>> if(col0Level < col5Level){ 
	mov	ax, word [bp-12]
	cmp	ax, word [bp-2]
	jle	L_lab8app_88
	; >>>>> Line:	244
	; >>>>> setOrientation(0); 
	xor	ax, ax
	push	ax
	call	setOrientation
	add	sp, 2
	; >>>>> Line:	245
	; >>>>> setColumn(0); 
	xor	ax, ax
	push	ax
	call	setColumn
	add	sp, 2
	jmp	L_lab8app_89
L_lab8app_88:
	; >>>>> Line:	247
	; >>>>> setOrientation(1); 
	mov	ax, 1
	push	ax
	call	setOrientation
	add	sp, 2
	; >>>>> Line:	248
	; >>>>> setColumn(5); 
	mov	ax, 5
	push	ax
	call	setColumn
	add	sp, 2
L_lab8app_89:
	jmp	L_lab8app_90
L_lab8app_87:
	; >>>>> Line:	250
	; >>>>> }else if(bin0 != 0){ 
	mov	al, byte [bp-13]
	test	al, al
	je	L_lab8app_91
	; >>>>> Line:	251
	; >>>>> setOrientation(2); 
	mov	ax, 2
	push	ax
	call	setOrientation
	add	sp, 2
	; >>>>> Line:	252
	; >>>>> setColumn(2); 
	mov	ax, 2
	push	ax
	call	setColumn
	add	sp, 2
	jmp	L_lab8app_92
L_lab8app_91:
	; >>>>> Line:	254
	; >>>>> setOrientation(3); 
	mov	ax, 3
	push	ax
	call	setOrientation
	add	sp, 2
	; >>>>> Line:	255
	; >>>>> setColumn(3); 
	mov	ax, 3
	push	ax
	call	setColumn
	add	sp, 2
L_lab8app_92:
L_lab8app_90:
L_lab8app_86:
L_lab8app_66:
	jmp	L_lab8app_65
L_lab8app_67:
	mov	sp, bp
	pop	bp
	ret
L_lab8app_63:
	push	bp
	mov	bp, sp
	sub	sp, 14
	jmp	L_lab8app_64
L_lab8app_96:
	DB	"% >",0xD,0xA,0
L_lab8app_95:
	DB	", CPU: ",0
L_lab8app_94:
	DB	"<CS: ",0
	ALIGN	2
StatsTask:
	; >>>>> Line:	262
	; >>>>> { 
	jmp	L_lab8app_97
L_lab8app_98:
	; >>>>> Line:	266
	; >>>>> YKIdleCount = 0; 
	mov	word [YKIdleCount], 0
	; >>>>> Line:	267
	; >>>>> YKDelayTask(5); 
	mov	ax, 5
	push	ax
	call	YKDelayTask
	add	sp, 2
	; >>>>> Line:	268
	; >>>>> max = YKIdleCount / 25; 
	mov	ax, word [YKIdleCount]
	cwd
	mov	cx, 25
	idiv	cx
	mov	word [bp-2], ax
	; >>>>> Line:	270
	; >>>>> YKIdleCount = 0; 
	mov	word [YKIdleCount], 0
	; >>>>> Line:	272
	; >>>>> YKNewTask(SimpCommTask, (void *) &SimpCommTaskStk[512], 30); 
	mov	al, 30
	push	ax
	mov	ax, (SimpCommTaskStk+1024)
	push	ax
	mov	ax, SimpCommTask
	push	ax
	call	YKNewTask
	add	sp, 6
	; >>>>> Line:	273
	; >>>>> YKNewTask(NewPieceTask, (void *) &NewPieceTaskStk[512], 10); 
	mov	al, 10
	push	ax
	mov	ax, (NewPieceTaskStk+1024)
	push	ax
	mov	ax, NewPieceTask
	push	ax
	call	YKNewTask
	add	sp, 6
	; >>>>> Line:	274
	; >>>>> StartSimptris(); 
	call	StartSimptris
	; >>>>> Line:	276
	; >>>>> while (1) 
	jmp	L_lab8app_100
L_lab8app_99:
	; >>>>> Line:	278
	; >>>>> YKDelayTask(20); 
	mov	ax, 20
	push	ax
	call	YKDelayTask
	add	sp, 2
	; >>>>> Line:	280
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	281
	; >>>>> switchCount = YKCtxSwCount; 
	mov	ax, word [YKCtxSwCount]
	mov	word [bp-4], ax
	; >>>>> Line:	282
	; >>>>> idleCount = YKIdleCount; 
	mov	ax, word [YKIdleCount]
	mov	word [bp-6], ax
	; >>>>> Line:	283
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	; >>>>> Line:	285
	; >>>>> printString("<CS: "); 
	mov	ax, L_lab8app_94
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	286
	; >>>>> printInt((int)switchCount); 
	push	word [bp-4]
	call	printInt
	add	sp, 2
	; >>>>> Line:	287
	; >>>>> printString(", CPU: "); 
	mov	ax, L_lab8app_95
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	288
	; >>>>>  
	mov	ax, word [bp-6]
	xor	dx, dx
	div	word [bp-2]
	mov	word [bp-8], ax
	; >>>>> Line:	289
	; >>>>> printInt(100-tmp); 
	mov	ax, 100
	sub	ax, word [bp-8]
	push	ax
	call	printInt
	add	sp, 2
	; >>>>> Line:	290
	; >>>>> printString("% >\r\n"); 
	mov	ax, L_lab8app_96
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	292
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	293
	; >>>>> YKCtxSwCount = 0; 
	mov	word [YKCtxSwCount], 0
	; >>>>> Line:	294
	; >>>>> YKIdleCount = 0; 
	mov	word [YKIdleCount], 0
	; >>>>> Line:	295
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
L_lab8app_100:
	jmp	L_lab8app_99
L_lab8app_101:
	mov	sp, bp
	pop	bp
	ret
L_lab8app_97:
	push	bp
	mov	bp, sp
	sub	sp, 8
	jmp	L_lab8app_98
	ALIGN	2
main:
	; >>>>> Line:	301
	; >>>>> { 
	jmp	L_lab8app_103
L_lab8app_104:
	; >>>>> Line:	302
	; >>>>> YKInitialize(); 
	call	YKInitialize
	; >>>>> Line:	304
	; >>>>> MsgQPtr = YKQCreate(MsgQ, 10); 
	mov	ax, 10
	push	ax
	mov	ax, MsgQ
	push	ax
	call	YKQCreate
	add	sp, 4
	mov	word [MsgQPtr], ax
	; >>>>> Line:	306
	; >>>>> YKNewTask(StatsTask, (void *) &StatsTaskStk[512], 50); 
	mov	al, 50
	push	ax
	mov	ax, (StatsTaskStk+1024)
	push	ax
	mov	ax, StatsTask
	push	ax
	call	YKNewTask
	add	sp, 6
	; >>>>> Line:	308
	; >>>>> SeedSimptris(10947); 
	mov	ax, 10947
	xor	dx, dx
	push	dx
	push	ax
	call	SeedSimptris
	add	sp, 4
	; >>>>> Line:	310
	; >>>>> NPSemPtr = YKSemCreate(0); 
	xor	ax, ax
	push	ax
	call	YKSemCreate
	add	sp, 2
	mov	word [NPSemPtr], ax
	; >>>>> Line:	311
	; >>>>> RCSemPtr = YKSemCreate(1); 
	mov	ax, 1
	push	ax
	call	YKSemCreate
	add	sp, 2
	mov	word [RCSemPtr], ax
	; >>>>> Line:	312
	; >>>>> TDSemPtr = YKSemCreate(1); 
	mov	ax, 1
	push	ax
	call	YKSemCreate
	add	sp, 2
	mov	word [TDSemPtr], ax
	; >>>>> Line:	315
	; >>>>> YKRun(); 
	call	YKRun
	mov	sp, bp
	pop	bp
	ret
L_lab8app_103:
	push	bp
	mov	bp, sp
	jmp	L_lab8app_104
	ALIGN	2
MsgArray:
	TIMES	120 db 0
SimpCommTaskStk:
	TIMES	1024 db 0
NewPieceTaskStk:
	TIMES	1024 db 0
StatsTaskStk:
	TIMES	1024 db 0
MsgQ:
	TIMES	20 db 0
MsgQPtr:
	TIMES	2 db 0
RCSemPtr:
	TIMES	2 db 0
NPSemPtr:
	TIMES	2 db 0
TDSemPtr:
	TIMES	2 db 0
