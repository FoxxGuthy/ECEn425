; Generated by c86 (BYU-NASM) 5.1 (beta) from yakc.i
	CPU	8086
	ALIGN	2
	jmp	main	; Jump to program start
	ALIGN	2
currentTask:
	DW	0
taskSaveCTX:
	DW	0
TCBIdx:
	DW	0
SEMIdx:
	DW	0
YKQIdx:
	DW	0
YKEIdx:
	DW	0
YKISRDepth:
	DW	0
YKCtxSwCount:
	DW	0
YKIdleCount:
	DW	0
YKTickNum:
	DW	0
YKKernalStarted:
	DB	0
	ALIGN	2
printDebug:
	; >>>>> Line:	72
	; >>>>> void printDebug(char *string) { 
	jmp	L_yakc_1
L_yakc_2:
	; >>>>> Line:	73
	; >>>>> if(0 == 1){ 
	jmp	L_yakc_3
	; >>>>> Line:	74
	; >>>>> printString(string); 
	push	word [bp+4]
	call	printString
	add	sp, 2
	; >>>>> Line:	75
	; >>>>> printNewLine(); 
	call	printNewLine
L_yakc_3:
	mov	sp, bp
	pop	bp
	ret
L_yakc_1:
	push	bp
	mov	bp, sp
	jmp	L_yakc_2
L_yakc_5:
	DB	"IN YKINITIALIZE - CHECK",0
	ALIGN	2
YKInitialize:
	; >>>>> Line:	79
	; >>>>> = 0; 
	jmp	L_yakc_6
L_yakc_7:
	; >>>>> Line:	81
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	82
	; >>>>> printDebug("IN YKINITIALIZE - CHECK"); 
	mov	ax, L_yakc_5
	push	ax
	call	printDebug
	add	sp, 2
	; >>>>> Line:	83
	; >>>>> YKNewTask(YKIdleTask, (void *)&YKIdleStk[256], 100); 
	mov	al, 100
	push	ax
	mov	ax, (YKIdleStk+512)
	push	ax
	mov	ax, YKIdleTask
	push	ax
	call	YKNewTask
	add	sp, 6
	mov	sp, bp
	pop	bp
	ret
L_yakc_6:
	push	bp
	mov	bp, sp
	jmp	L_yakc_7
	ALIGN	2
YKIdleTask:
	; >>>>> Line:	89
	; >>>>> void YKIdleTask(void){ 
	jmp	L_yakc_9
L_yakc_10:
	; >>>>> Line:	90
	; >>>>> while(1){ 
	jmp	L_yakc_12
L_yakc_11:
	; >>>>> Line:	92
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	93
	; >>>>> YKIdleCount++; 
	inc	word [YKIdleCount]
	; >>>>> Line:	94
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
L_yakc_12:
	jmp	L_yakc_11
L_yakc_13:
	mov	sp, bp
	pop	bp
	ret
L_yakc_9:
	push	bp
	mov	bp, sp
	jmp	L_yakc_10
	ALIGN	2
YKNewTask:
	; >>>>> Line:	98
	; >>>>> void YKNewTask(void (* task)(void), void *taskStack, unsigned char priority){ 
	jmp	L_yakc_15
L_yakc_16:
	; >>>>> Line:	101
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	102
	; >>>>> TCBArray[TCBIdx].state = 1; 
	mov	ax, word [TCBIdx]
	mov	cx, 18
	imul	cx
	add	ax, TCBArray
	mov	si, ax
	add	si, 2
	mov	byte [si], 1
	; >>>>> Line:	103
	; >>>>> TCBArray[TCBIdx].priority = priority; 
	mov	ax, word [TCBIdx]
	mov	cx, 18
	imul	cx
	add	ax, TCBArray
	mov	si, ax
	add	si, 3
	mov	al, byte [bp+8]
	mov	byte [si], al
	; >>>>> Line:	105
	; >>>>> TCBArray[TCBIdx].delayCount = 0; 
	mov	ax, word [TCBIdx]
	mov	cx, 18
	imul	cx
	add	ax, TCBArray
	mov	si, ax
	add	si, 16
	mov	word [si], 0
	; >>>>> Line:	107
	; >>>>> newSP = (unsigned *) taskStack - 11; 
	mov	ax, word [bp+6]
	sub	ax, 22
	mov	word [bp-2], ax
	; >>>>> Line:	122
	; >>>>> newSP[0] = 0; 
	mov	si, word [bp-2]
	mov	word [si], 0
	; >>>>> Line:	123
	; >>>>> newSP[1] = 
	mov	si, word [bp-2]
	add	si, 2
	mov	word [si], 0
	; >>>>> Line:	124
	; >>>>> newSP[2] = 0; 
	mov	si, word [bp-2]
	add	si, 4
	mov	word [si], 0
	; >>>>> Line:	125
	; >>>>> newSP[3] = 0; 
	mov	si, word [bp-2]
	add	si, 6
	mov	word [si], 0
	; >>>>> Line:	126
	; >>>>> newSP[4] = 0; 
	mov	si, word [bp-2]
	add	si, 8
	mov	word [si], 0
	; >>>>> Line:	127
	; >>>>> newSP[5] = 0; 
	mov	si, word [bp-2]
	add	si, 10
	mov	word [si], 0
	; >>>>> Line:	128
	; >>>>> newSP[6] = 0; 
	mov	si, word [bp-2]
	add	si, 12
	mov	word [si], 0
	; >>>>> Line:	129
	; >>>>> newSP[7] = 0; 
	mov	si, word [bp-2]
	add	si, 14
	mov	word [si], 0
	; >>>>> Line:	130
	; >>>>> newSP[7] = 0; 
	mov	si, word [bp-2]
	add	si, 14
	mov	word [si], 0
	; >>>>> Line:	131
	; >>>>> newSP[8] = (unsigned) task; 
	mov	si, word [bp-2]
	add	si, 16
	mov	ax, word [bp+4]
	mov	word [si], ax
	; >>>>> Line:	132
	; >>>>> newSP[9] = 0; 
	mov	si, word [bp-2]
	add	si, 18
	mov	word [si], 0
	; >>>>> Line:	133
	; >>>>> newSP[10] = 0x0200; 
	mov	si, word [bp-2]
	add	si, 20
	mov	word [si], 512
	; >>>>> Line:	135
	; >>>>> TCBArray[TCBIdx].sp = newSP-1; 
	mov	ax, word [bp-2]
	sub	ax, 2
	push	ax
	mov	ax, word [TCBIdx]
	mov	cx, 18
	imul	cx
	mov	dx, ax
	mov	si, dx
	add	si, TCBArray
	pop	ax
	mov	word [si], ax
	; >>>>> Line:	138
	; >>>>> if(TCBIdx == 0){ 
	mov	ax, word [TCBIdx]
	test	ax, ax
	jne	L_yakc_17
	; >>>>> Line:	139
	; >>>>> taskhead = &TCBArray[TCBIdx]; 
	mov	ax, word [TCBIdx]
	mov	cx, 18
	imul	cx
	add	ax, TCBArray
	mov	word [taskhead], ax
	; >>>>> Line:	140
	; >>>>> TCBArray[TCBIdx].nextTask = 0; 
	mov	ax, word [TCBIdx]
	mov	cx, 18
	imul	cx
	add	ax, TCBArray
	mov	si, ax
	add	si, 4
	mov	word [si], 0
	jmp	L_yakc_18
L_yakc_17:
	; >>>>> Line:	144
	; >>>>> if(priority < taskhead->priority){ 
	mov	si, word [taskhead]
	add	si, 3
	mov	al, byte [bp+8]
	cmp	al, byte [si]
	jae	L_yakc_19
	; >>>>> Line:	146
	; >>>>> TCBArray[TCBIdx].nextTask = taskhead; 
	mov	ax, word [TCBIdx]
	mov	cx, 18
	imul	cx
	add	ax, TCBArray
	mov	si, ax
	add	si, 4
	mov	ax, word [taskhead]
	mov	word [si], ax
	; >>>>> Line:	147
	; >>>>> taskhead = &TCBArray[TCBIdx]; 
	mov	ax, word [TCBIdx]
	mov	cx, 18
	imul	cx
	add	ax, TCBArray
	mov	word [taskhead], ax
	jmp	L_yakc_20
L_yakc_19:
	; >>>>> Line:	151
	; >>>>> traveser = taskhead; 
	mov	ax, word [taskhead]
	mov	word [bp-4], ax
	; >>>>> Line:	153
	; >>>>> while(traveser){ 
	jmp	L_yakc_22
L_yakc_21:
	; >>>>> Line:	154
	; >>>>> if(priorit 
	mov	si, word [bp-4]
	add	si, 4
	mov	si, word [si]
	add	si, 3
	mov	al, byte [bp+8]
	cmp	al, byte [si]
	jae	L_yakc_24
	; >>>>> Line:	155
	; >>>>> TCBArray[TCBIdx].nextTask = traveser->nextTask; 
	mov	si, word [bp-4]
	add	si, 4
	mov	ax, word [TCBIdx]
	mov	cx, 18
	imul	cx
	add	ax, TCBArray
	mov	di, ax
	add	di, 4
	mov	ax, word [si]
	mov	word [di], ax
	; >>>>> Line:	156
	; >>>>> traveser->nextTask = &TCBArray[TCBIdx]; 
	mov	ax, word [TCBIdx]
	mov	cx, 18
	imul	cx
	add	ax, TCBArray
	mov	si, word [bp-4]
	add	si, 4
	mov	word [si], ax
	; >>>>> Line:	157
	; >>>>> break; 
	jmp	L_yakc_23
L_yakc_24:
	; >>>>> Line:	159
	; >>>>> traveser = traveser->nextTask; 
	mov	si, word [bp-4]
	add	si, 4
	mov	ax, word [si]
	mov	word [bp-4], ax
L_yakc_22:
	mov	ax, word [bp-4]
	test	ax, ax
	jne	L_yakc_21
L_yakc_23:
L_yakc_20:
L_yakc_18:
	; >>>>> Line:	164
	; >>>>> TCBIdx++; 
	inc	word [TCBIdx]
	; >>>>> Line:	165
	; >>>>> if(0){ 
	jmp	L_yakc_25
	; >>>>> Line:	166
	; >>>>> dumpLists(); 
	call	dumpLists
L_yakc_25:
	; >>>>> Line:	169
	; >>>>> if(YKKernalStarted == 1){ 
	cmp	byte [YKKernalStarted], 1
	jne	L_yakc_26
	; >>>>> Line:	170
	; >>>>> YKScheduler(1); 
	mov	al, 1
	push	ax
	call	YKScheduler
	add	sp, 2
L_yakc_26:
	mov	sp, bp
	pop	bp
	ret
L_yakc_15:
	push	bp
	mov	bp, sp
	sub	sp, 4
	jmp	L_yakc_16
L_yakc_31:
	DB	"] ",0
L_yakc_30:
	DB	",",0
L_yakc_29:
	DB	"[",0
L_yakc_28:
	DB	"TCBList: ",0
	ALIGN	2
dumpLists:
	; >>>>> Line:	175
	; >>>>> void dumpLists(){ 
	jmp	L_yakc_32
L_yakc_33:
	; >>>>> Line:	177
	; >>>>> traveser = taskhead; 
	mov	ax, word [taskhead]
	mov	word [bp-2], ax
	; >>>>> Line:	178
	; >>>>> printNewLine(); 
	call	printNewLine
	; >>>>> Line:	179
	; >>>>> printString("TCBList: "); 
	mov	ax, L_yakc_28
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	180
	; >>>>> while(traveser){ 
	jmp	L_yakc_35
L_yakc_34:
	; >>>>> Line:	181
	; >>>>> printString("["); 
	mov	ax, L_yakc_29
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	182
	; >>>>> printInt(traveser->priority); 
	mov	si, word [bp-2]
	add	si, 3
	mov	al, byte [si]
	xor	ah, ah
	push	ax
	call	printInt
	add	sp, 2
	; >>>>> Line:	183
	; >>>>> printString(","); 
	mov	ax, L_yakc_30
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	184
	; >>>>> printInt(traveser->state 
	mov	si, word [bp-2]
	add	si, 2
	mov	al, byte [si]
	xor	ah, ah
	push	ax
	call	printInt
	add	sp, 2
	; >>>>> Line:	185
	; >>>>> printString(","); 
	mov	ax, L_yakc_30
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	186
	; >>>>> printInt(traveser->delayCount); 
	mov	si, word [bp-2]
	add	si, 16
	push	word [si]
	call	printInt
	add	sp, 2
	; >>>>> Line:	187
	; >>>>> printString("] "); 
	mov	ax, L_yakc_31
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	189
	; >>>>> traveser = traveser->nextTask; 
	mov	si, word [bp-2]
	add	si, 4
	mov	ax, word [si]
	mov	word [bp-2], ax
L_yakc_35:
	mov	ax, word [bp-2]
	test	ax, ax
	jne	L_yakc_34
L_yakc_36:
	; >>>>> Line:	192
	; >>>>> printNewLine(); 
	call	printNewLine
	mov	sp, bp
	pop	bp
	ret
L_yakc_32:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_yakc_33
L_yakc_39:
	DB	" | ",0
L_yakc_38:
	DB	"Sem Values: ",0
	ALIGN	2
dumpSems:
	; >>>>> Line:	195
	; >>>>> void dumpSems(){ 
	jmp	L_yakc_40
L_yakc_41:
	; >>>>> Line:	197
	; >>>>> printString("Sem Values: "); 
	mov	word [bp-2], 0
	; >>>>> Line:	197
	; >>>>> printString("Sem Values: "); 
	mov	ax, L_yakc_38
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	198
	; >>>>> for(i=0; i<SEMIdx; i++){ 
	mov	word [bp-2], 0
	jmp	L_yakc_43
L_yakc_42:
	; >>>>> Line:	199
	; >>>>> printInt(SEMArray[i]); 
	mov	ax, word [bp-2]
	shl	ax, 1
	mov	si, ax
	add	si, SEMArray
	push	word [si]
	call	printInt
	add	sp, 2
	; >>>>> Line:	200
	; >>>>> printString(" | "); 
	mov	ax, L_yakc_39
	push	ax
	call	printString
	add	sp, 2
L_yakc_45:
	inc	word [bp-2]
L_yakc_43:
	mov	ax, word [SEMIdx]
	cmp	ax, word [bp-2]
	jg	L_yakc_42
L_yakc_44:
	; >>>>> Line:	203
	; >>>>> printNewLine(); 
	call	printNewLine
	mov	sp, bp
	pop	bp
	ret
L_yakc_40:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_yakc_41
L_yakc_47:
	DB	"IN YKRun",0
	ALIGN	2
YKRun:
	; >>>>> Line:	206
	; >>>>> void YKRun(void){ 
	jmp	L_yakc_48
L_yakc_49:
	; >>>>> Line:	207
	; >>>>> printDebug("IN YKRun"); 
	mov	ax, L_yakc_47
	push	ax
	call	printDebug
	add	sp, 2
	; >>>>> Line:	209
	; >>>>> YKKernalStarted = 1; 
	mov	byte [YKKernalStarted], 1
	; >>>>> Line:	211
	; >>>>> YKScheduler(0); 
	xor	al, al
	push	ax
	call	YKScheduler
	add	sp, 2
	mov	sp, bp
	pop	bp
	ret
L_yakc_48:
	push	bp
	mov	bp, sp
	jmp	L_yakc_49
L_yakc_53:
	DB	"Calling Dispatcher to dispatch task with priority ",0
L_yakc_52:
	DB	"SaveContext: ",0
L_yakc_51:
	DB	"IN YKScheduler",0
	ALIGN	2
YKScheduler:
	; >>>>> Line:	214
	; >>>>> void YKScheduler(char saveCTX){ 
	jmp	L_yakc_54
L_yakc_55:
	; >>>>> Line:	217
	; >>>>> traveser = taskhead; 
	mov	ax, word [taskhead]
	mov	word [bp-2], ax
	; >>>>> Line:	218
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	219
	; >>>>> printDebug("IN YKScheduler"); 
	mov	ax, L_yakc_51
	push	ax
	call	printDebug
	add	sp, 2
	; >>>>> Line:	220
	; >>>>> if(0){ 
	jmp	L_yakc_56
	; >>>>> Line:	221
	; >>>>> printString("SaveContext: "); 
	mov	ax, L_yakc_52
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	222
	; >>>>> printInt(saveCTX); 
	mov	al, byte [bp+4]
	cbw
	push	ax
	call	printInt
	add	sp, 2
	; >>>>> Line:	223
	; >>>>> printNewLine(); 
	call	printNewLine
L_yakc_56:
	; >>>>> Line:	225
	; >>>>> while(traveser){ 
	jmp	L_yakc_58
L_yakc_57:
	; >>>>> Line:	226
	; >>>>> if(traveser->state == 1){ 
	mov	si, word [bp-2]
	add	si, 2
	cmp	byte [si], 1
	jne	L_yakc_60
	; >>>>> Line:	227
	; >>>>> nextTask = traveser; 
	mov	ax, word [bp-2]
	mov	word [nextTask], ax
	; >>>>> Line:	228
	; >>>>> break; 
	jmp	L_yakc_59
L_yakc_60:
	; >>>>> Line:	230
	; >>>>> traveser = traveser->nextTask; 
	mov	si, word [bp-2]
	add	si, 4
	mov	ax, word [si]
	mov	word [bp-2], ax
L_yakc_58:
	mov	ax, word [bp-2]
	test	ax, ax
	jne	L_yakc_57
L_yakc_59:
	; >>>>> Line:	233
	; >>>>> if(nextTask != currentTask){ 
	mov	ax, word [currentTask]
	cmp	ax, word [nextTask]
	je	L_yakc_61
	; >>>>> Line:	234
	; >>>>> YKCtxSwCount++; 
	inc	word [YKCtxSwCount]
	; >>>>> Line:	235
	; >>>>> taskSaveCTX = currentTask; 
	mov	ax, word [currentTask]
	mov	word [taskSaveCTX], ax
	; >>>>> Line:	236
	; >>>>> currentTask = nextTask; 
	mov	ax, word [nextTask]
	mov	word [currentTask], ax
	; >>>>> Line:	237
	; >>>>> if(0){ 
	jmp	L_yakc_62
	; >>>>> Line:	238
	; >>>>> printString("Calling Dispatcher to dispatch task with priority "); 
	mov	ax, L_yakc_53
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	239
	; >>>>> printInt(nextTask->priority); 
	mov	si, word [nextTask]
	add	si, 3
	mov	al, byte [si]
	xor	ah, ah
	push	ax
	call	printInt
	add	sp, 2
	; >>>>> Line:	240
	; >>>>> printNewLine(); 
	call	printNewLine
L_yakc_62:
	; >>>>> Line:	242
	; >>>>> YKDispatcher(saveCTX); 
	push	word [bp+4]
	call	YKDispatcher
	add	sp, 2
L_yakc_61:
	mov	sp, bp
	pop	bp
	ret
L_yakc_54:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_yakc_55
	ALIGN	2
YKDelayTask:
	; >>>>> Line:	248
	; >>>>> void YKDelayTask(unsigned newDelayCount) { 
	jmp	L_yakc_64
L_yakc_65:
	; >>>>> Line:	251
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	252
	; >>>>> if(newDelayCount == 0){ 
	mov	ax, word [bp+4]
	test	ax, ax
	jne	L_yakc_66
	; >>>>> Line:	253
	; >>>>> return ; 
	jmp	L_yakc_67
L_yakc_66:
	; >>>>> Line:	255
	; >>>>> currentTask->delayCount = newDelayCount; 
	mov	si, word [currentTask]
	add	si, 16
	mov	ax, word [bp+4]
	mov	word [si], ax
	; >>>>> Line:	256
	; >>>>> currentTask->state = 0; 
	mov	si, word [currentTask]
	add	si, 2
	mov	byte [si], 0
	; >>>>> Line:	258
	; >>>>> YKScheduler(1); 
	mov	al, 1
	push	ax
	call	YKScheduler
	add	sp, 2
	; >>>>> Line:	259
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
L_yakc_67:
	mov	sp, bp
	pop	bp
	ret
L_yakc_64:
	push	bp
	mov	bp, sp
	jmp	L_yakc_65
	ALIGN	2
YKEnterISR:
	; >>>>> Line:	263
	; >>>>> void YKEnterISR(void) { 
	jmp	L_yakc_69
L_yakc_70:
	; >>>>> Line:	265
	; >>>>> YKISRDepth++; 
	inc	word [YKISRDepth]
	mov	sp, bp
	pop	bp
	ret
L_yakc_69:
	push	bp
	mov	bp, sp
	jmp	L_yakc_70
	ALIGN	2
YKExitISR:
	; >>>>> Line:	268
	; >>>>> void YKExitISR(void) { 
	jmp	L_yakc_72
L_yakc_73:
	; >>>>> Line:	271
	; >>>>> YKISRDepth--; 
	dec	word [YKISRDepth]
	; >>>>> Line:	272
	; >>>>> if (YKISRDepth == 0) { 
	mov	ax, word [YKISRDepth]
	test	ax, ax
	jne	L_yakc_74
	; >>>>> Line:	273
	; >>>>> YKScheduler(1); 
	mov	al, 1
	push	ax
	call	YKScheduler
	add	sp, 2
	; >>>>> Line:	274
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
L_yakc_74:
	mov	sp, bp
	pop	bp
	ret
L_yakc_72:
	push	bp
	mov	bp, sp
	jmp	L_yakc_73
L_yakc_78:
	DB	"SOMETHING HAS GONE HORRIBLY WRONG -- TASK HAS DELAY COUNT < 0. Priority: ",0
L_yakc_77:
	DB	"task now READY with priority ",0
L_yakc_76:
	DB	"IN YKTickHandler",0
	ALIGN	2
YKTickHandler:
	; >>>>> Line:	278
	; >>>>> void YKTickHandler(void) { 
	jmp	L_yakc_79
L_yakc_80:
	; >>>>> Line:	284
	; >>>>> traveser = taskhead; 
	mov	ax, word [taskhead]
	mov	word [bp-2], ax
	; >>>>> Line:	286
	; >>>>> YKTickNum++; 
	inc	word [YKTickNum]
	; >>>>> Line:	287
	; >>>>> printDebug("IN YKTickHandler"); 
	mov	ax, L_yakc_76
	push	ax
	call	printDebug
	add	sp, 2
	; >>>>> Line:	288
	; >>>>> while(traveser){ 
	jmp	L_yakc_82
L_yakc_81:
	; >>>>> Line:	289
	; >>>>> if(traveser->state == 0){ 
	mov	si, word [bp-2]
	add	si, 2
	mov	al, byte [si]
	test	al, al
	jne	L_yakc_84
	; >>>>> Line:	290
	; >>>>> traveser->delayCount--; 
	mov	si, word [bp-2]
	add	si, 16
	dec	word [si]
	; >>>>> Line:	292
	; >>>>> == 1) 
	mov	si, word [bp-2]
	add	si, 16
	mov	ax, word [si]
	test	ax, ax
	jne	L_yakc_85
	; >>>>> Line:	294
	; >>>>> if(0 == 1){ 
	jmp	L_yakc_86
	; >>>>> Line:	295
	; >>>>> printString("task now READY with priority "); 
	mov	ax, L_yakc_77
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	296
	; >>>>> printInt(traveser->priority); 
	mov	si, word [bp-2]
	add	si, 3
	mov	al, byte [si]
	xor	ah, ah
	push	ax
	call	printInt
	add	sp, 2
	; >>>>> Line:	297
	; >>>>> printNewLine(); 
	call	printNewLine
L_yakc_86:
	; >>>>> Line:	300
	; >>>>> traveser->state = 1; 
	mov	si, word [bp-2]
	add	si, 2
	mov	byte [si], 1
L_yakc_85:
	; >>>>> Line:	303
	; >>>>> if(traveser->delayCount < 0){ 
	mov	si, word [bp-2]
	add	si, 16
	cmp	word [si], 0
	jge	L_yakc_87
	; >>>>> Line:	304
	; >>>>> printString("SOMETHING HAS GONE HORRIBLY WRONG -- TASK HAS DELAY COUNT < 0. Priority: "); 
	mov	ax, L_yakc_78
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	305
	; >>>>> printInt(traveser->priority); 
	mov	si, word [bp-2]
	add	si, 3
	mov	al, byte [si]
	xor	ah, ah
	push	ax
	call	printInt
	add	sp, 2
	; >>>>> Line:	306
	; >>>>> printNewLine(); 
	call	printNewLine
L_yakc_87:
L_yakc_84:
	; >>>>> Line:	310
	; >>>>> traveser = traveser->nextTask; 
	mov	si, word [bp-2]
	add	si, 4
	mov	ax, word [si]
	mov	word [bp-2], ax
L_yakc_82:
	mov	ax, word [bp-2]
	test	ax, ax
	jne	L_yakc_81
L_yakc_83:
	mov	sp, bp
	pop	bp
	ret
L_yakc_79:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_yakc_80
L_yakc_89:
	DB	"PROBLEM: Semaphore initialized with negative value!",0
	ALIGN	2
YKSemCreate:
	; >>>>> Line:	316
	; >>>>> YKSEM* YKSemCreate(int initialValue){ 
	jmp	L_yakc_90
L_yakc_91:
	; >>>>> Line:	319
	; >>>>> if(initialValue < 0){ 
	cmp	word [bp+4], 0
	jge	L_yakc_92
	; >>>>> Line:	321
	; >>>>> if(0 == 1) 
	jmp	L_yakc_93
	; >>>>> Line:	322
	; >>>>> printString("PROBLEM: Semaphore initialized with negative value!"); 
	mov	ax, L_yakc_89
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	323
	; >>>>> printNewLine(); 
	call	printNewLine
L_yakc_93:
	; >>>>> Line:	325
	; >>>>> return 0; 
	xor	ax, ax
	jmp	L_yakc_94
L_yakc_92:
	; >>>>> Line:	328
	; >>>>> temp = &SEMArray[SEMIdx]; 
	mov	ax, word [SEMIdx]
	shl	ax, 1
	add	ax, SEMArray
	mov	word [bp-2], ax
	; >>>>> Line:	329
	; >>>>> *temp = initialValue; 
	mov	si, word [bp-2]
	mov	ax, word [bp+4]
	mov	word [si], ax
	; >>>>> Line:	330
	; >>>>> SEMIdx++; 
	inc	word [SEMIdx]
	; >>>>> Line:	331
	; >>>>> return temp; 
	mov	ax, word [bp-2]
L_yakc_94:
	mov	sp, bp
	pop	bp
	ret
L_yakc_90:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_yakc_91
	ALIGN	2
YKSemPend:
	; >>>>> Line:	335
	; >>>>> void YKSemPend(YKSEM *semaphore){ 
	jmp	L_yakc_96
L_yakc_97:
	; >>>>> Line:	336
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	337
	; >>>>> if(*semaphore == 0){ 
	mov	si, word [bp+4]
	mov	ax, word [si]
	test	ax, ax
	jne	L_yakc_98
	; >>>>> Line:	338
	; >>>>> currentTask->state = 3; 
	mov	si, word [currentTask]
	add	si, 2
	mov	byte [si], 3
	; >>>>> Line:	339
	; >>>>> currentTask->blocker = semaphore; 
	mov	si, word [currentTask]
	add	si, 6
	mov	ax, word [bp+4]
	mov	word [si], ax
	; >>>>> Line:	340
	; >>>>> YKScheduler(1); 
	mov	al, 1
	push	ax
	call	YKScheduler
	add	sp, 2
L_yakc_98:
	; >>>>> Line:	342
	; >>>>> (*semaphore)--; 
	mov	si, word [bp+4]
	dec	word [si]
	; >>>>> Line:	343
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	mov	sp, bp
	pop	bp
	ret
L_yakc_96:
	push	bp
	mov	bp, sp
	jmp	L_yakc_97
	ALIGN	2
YKSemPost:
	; >>>>> Line:	347
	; >>>>> void YKSemPost(YKSEM *semaphore){ 
	jmp	L_yakc_100
L_yakc_101:
	; >>>>> Line:	352
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	353
	; >>>>> (*semaphore)++; 
	mov	si, word [bp+4]
	inc	word [si]
	; >>>>> Line:	354
	; >>>>> traveser = taskhead; 
	mov	ax, word [taskhead]
	mov	word [bp-2], ax
	; >>>>> Line:	356
	; >>>>> while(trav 
	jmp	L_yakc_103
L_yakc_102:
	; >>>>> Line:	357
	; >>>>> if(traveser->state == 3){ 
	mov	si, word [bp-2]
	add	si, 2
	cmp	byte [si], 3
	jne	L_yakc_105
	; >>>>> Line:	360
	; >>>>> if(traveser->blocker == semaphore){ 
	mov	si, word [bp-2]
	add	si, 6
	mov	ax, word [bp+4]
	cmp	ax, word [si]
	jne	L_yakc_106
	; >>>>> Line:	361
	; >>>>> traveser->state = 1; 
	mov	si, word [bp-2]
	add	si, 2
	mov	byte [si], 1
	; >>>>> Line:	362
	; >>>>> traveser->blocker = 0; 
	mov	si, word [bp-2]
	add	si, 6
	mov	word [si], 0
	; >>>>> Line:	363
	; >>>>> break; 
	jmp	L_yakc_104
L_yakc_106:
L_yakc_105:
	; >>>>> Line:	366
	; >>>>> traveser = traveser->nextTask; 
	mov	si, word [bp-2]
	add	si, 4
	mov	ax, word [si]
	mov	word [bp-2], ax
L_yakc_103:
	mov	ax, word [bp-2]
	test	ax, ax
	jne	L_yakc_102
L_yakc_104:
	; >>>>> Line:	369
	; >>>>> if (YKISRDepth == 0) { 
	mov	ax, word [YKISRDepth]
	test	ax, ax
	jne	L_yakc_107
	; >>>>> Line:	370
	; >>>>> YKScheduler(1); 
	mov	al, 1
	push	ax
	call	YKScheduler
	add	sp, 2
L_yakc_107:
	; >>>>> Line:	372
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	mov	sp, bp
	pop	bp
	ret
L_yakc_100:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_yakc_101
	ALIGN	2
YKQCreate:
	; >>>>> Line:	378
	; >>>>> YKQ *YKQCreate(void **start, unsigned size) { 
	jmp	L_yakc_109
L_yakc_110:
	; >>>>> Line:	379
	; >>>>> YKQArray[YKQIdx].length = size; 
	mov	ax, word [YKQIdx]
	mov	cx, 10
	imul	cx
	add	ax, YKQArray
	mov	si, ax
	add	si, 2
	mov	ax, word [bp+6]
	mov	word [si], ax
	; >>>>> Line:	380
	; >>>>> YKQArray[YKQIdx].queueAddress = start; 
	mov	ax, word [YKQIdx]
	mov	cx, 10
	imul	cx
	mov	si, ax
	add	si, YKQArray
	mov	ax, word [bp+4]
	mov	word [si], ax
	; >>>>> Line:	381
	; >>>>> YKQArray[YKQIdx].nextEmpty = start; 
	mov	ax, word [YKQIdx]
	mov	cx, 10
	imul	cx
	add	ax, YKQArray
	mov	si, ax
	add	si, 4
	mov	ax, word [bp+4]
	mov	word [si], ax
	; >>>>> Line:	382
	; >>>>> YKQArray[YKQIdx].nextRemove = start; 
	mov	ax, word [YKQIdx]
	mov	cx, 10
	imul	cx
	add	ax, YKQArray
	mov	si, ax
	add	si, 6
	mov	ax, word [bp+4]
	mov	word [si], ax
	; >>>>> Line:	383
	; >>>>> YKQArray[YKQIdx].state = 0; 
	mov	ax, word [YKQIdx]
	mov	cx, 10
	imul	cx
	add	ax, YKQArray
	mov	si, ax
	add	si, 8
	mov	word [si], 0
	; >>>>> Line:	385
	; >>>>> YKQIdx++; 
	inc	word [YKQIdx]
	; >>>>> Line:	387
	; >>>>> return &YKQArray[Y 
	mov	ax, word [YKQIdx]
	dec	ax
	mov	cx, 10
	imul	cx
	add	ax, YKQArray
L_yakc_111:
	mov	sp, bp
	pop	bp
	ret
L_yakc_109:
	push	bp
	mov	bp, sp
	jmp	L_yakc_110
L_yakc_114:
	DB	", ",0
L_yakc_113:
	DB	"YKQ STRUCT: ",0
	ALIGN	2
debugQueue:
	; >>>>> Line:	391
	; >>>>> void debugQueue(YKQ *queue){ 
	jmp	L_yakc_115
L_yakc_116:
	; >>>>> Line:	392
	; >>>>> printString("YKQ STRUCT: "); 
	mov	ax, L_yakc_113
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	393
	; >>>>> printWord((int) queue->nextEmpty); 
	mov	si, word [bp+4]
	add	si, 4
	push	word [si]
	call	printWord
	add	sp, 2
	; >>>>> Line:	394
	; >>>>> printString(", "); 
	mov	ax, L_yakc_114
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	395
	; >>>>> printWord((int) queue->nextRemove); 
	mov	si, word [bp+4]
	add	si, 6
	push	word [si]
	call	printWord
	add	sp, 2
	; >>>>> Line:	396
	; >>>>> printNewLine(); 
	call	printNewLine
	mov	sp, bp
	pop	bp
	ret
L_yakc_115:
	push	bp
	mov	bp, sp
	jmp	L_yakc_116
	ALIGN	2
YKQPend:
	; >>>>> Line:	399
	; >>>>> void *YKQPend(YKQ *queue) { 
	jmp	L_yakc_118
L_yakc_119:
	; >>>>> Line:	402
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	403
	; >>>>> if(queue->state == 0){ 
	mov	si, word [bp+4]
	add	si, 8
	mov	ax, word [si]
	test	ax, ax
	jne	L_yakc_120
	; >>>>> Line:	404
	; >>>>> currentTask->state = 4; 
	mov	si, word [currentTask]
	add	si, 2
	mov	byte [si], 4
	; >>>>> Line:	405
	; >>>>> currentTask->qblocker = queue; 
	mov	si, word [currentTask]
	add	si, 8
	mov	ax, word [bp+4]
	mov	word [si], ax
	; >>>>> Line:	406
	; >>>>> YKScheduler(1); 
	mov	al, 1
	push	ax
	call	YKScheduler
	add	sp, 2
L_yakc_120:
	; >>>>> Line:	408
	; >>>>> tempmsg = (void *) *queue->nextRemove; 
	mov	si, word [bp+4]
	add	si, 6
	mov	si, word [si]
	mov	ax, word [si]
	mov	word [bp-2], ax
	; >>>>> Line:	410
	; >>>>> queue->nextRemove++; 
	mov	si, word [bp+4]
	add	si, 6
	add	word [si], 2
	; >>>>> Line:	411
	; >>>>> if(queue->nextRemove == queue->queueAddress + queue->length){ 
	mov	si, word [bp+4]
	add	si, 2
	mov	ax, word [si]
	shl	ax, 1
	mov	si, word [bp+4]
	add	ax, word [si]
	add	si, 6
	mov	dx, word [si]
	cmp	dx, ax
	jne	L_yakc_121
	; >>>>> Line:	412
	; >>>>> queue->nextRemove =  
	mov	si, word [bp+4]
	mov	di, word [bp+4]
	add	di, 6
	mov	ax, word [si]
	mov	word [di], ax
L_yakc_121:
	; >>>>> Line:	416
	; >>>>> if(queue->state == 1){ 
	mov	si, word [bp+4]
	add	si, 8
	cmp	word [si], 1
	jne	L_yakc_122
	; >>>>> Line:	417
	; >>>>> queue->state = 2; 
	mov	si, word [bp+4]
	add	si, 8
	mov	word [si], 2
	jmp	L_yakc_123
L_yakc_122:
	; >>>>> Line:	418
	; >>>>> }else if(queue->nextRemove == queue->nextEmpty){ 
	mov	si, word [bp+4]
	add	si, 6
	mov	di, word [bp+4]
	add	di, 4
	mov	ax, word [di]
	cmp	ax, word [si]
	jne	L_yakc_124
	; >>>>> Line:	419
	; >>>>> queue->state = 0; 
	mov	si, word [bp+4]
	add	si, 8
	mov	word [si], 0
L_yakc_124:
L_yakc_123:
	; >>>>> Line:	421
	; >>>>> if(0) debugQueue(queue); 
	jmp	L_yakc_125
	; >>>>> Line:	421
	; >>>>> if(0) debugQueue(queue); 
	push	word [bp+4]
	call	debugQueue
	add	sp, 2
L_yakc_125:
	; >>>>> Line:	422
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	; >>>>> Line:	423
	; >>>>> return tempmsg; 
	mov	ax, word [bp-2]
L_yakc_126:
	mov	sp, bp
	pop	bp
	ret
L_yakc_118:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_yakc_119
	ALIGN	2
YKQPost:
	; >>>>> Line:	426
	; >>>>> int YKQPost(YKQ *queue, void *msg) { 
	jmp	L_yakc_128
L_yakc_129:
	; >>>>> Line:	428
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	430
	; >>>>> if(queue->state == 1){ 
	mov	si, word [bp+4]
	add	si, 8
	cmp	word [si], 1
	jne	L_yakc_130
	; >>>>> Line:	431
	; >>>>> return 0; 
	xor	ax, ax
	jmp	L_yakc_131
L_yakc_130:
	; >>>>> Line:	433
	; >>>>> *queue->nextEmpty = msg; 
	mov	si, word [bp+4]
	add	si, 4
	mov	si, word [si]
	mov	ax, word [bp+6]
	mov	word [si], ax
	; >>>>> Line:	434
	; >>>>> queue->nextEmpty++; 
	mov	si, word [bp+4]
	add	si, 4
	add	word [si], 2
	; >>>>> Line:	435
	; >>>>> if(queue->nextEmpty == queue->queueAddress + queue->length){ 
	mov	si, word [bp+4]
	add	si, 2
	mov	ax, word [si]
	shl	ax, 1
	mov	si, word [bp+4]
	add	ax, word [si]
	add	si, 4
	mov	dx, word [si]
	cmp	dx, ax
	jne	L_yakc_132
	; >>>>> Line:	436
	; >>>>> queue->nextEmpty = queue->queueAddress; 
	mov	si, word [bp+4]
	mov	di, word [bp+4]
	add	di, 4
	mov	ax, word [si]
	mov	word [di], ax
L_yakc_132:
	; >>>>> Line:	439
	; >>>>> if(queue->sta 
	mov	si, word [bp+4]
	add	si, 8
	mov	ax, word [si]
	test	ax, ax
	jne	L_yakc_133
	; >>>>> Line:	440
	; >>>>> queue->state = 2; 
	mov	si, word [bp+4]
	add	si, 8
	mov	word [si], 2
	jmp	L_yakc_134
L_yakc_133:
	; >>>>> Line:	441
	; >>>>> }else if(queue->nextRemove == queue->nextEmpty){ 
	mov	si, word [bp+4]
	add	si, 6
	mov	di, word [bp+4]
	add	di, 4
	mov	ax, word [di]
	cmp	ax, word [si]
	jne	L_yakc_135
	; >>>>> Line:	442
	; >>>>> queue->state = 1; 
	mov	si, word [bp+4]
	add	si, 8
	mov	word [si], 1
L_yakc_135:
L_yakc_134:
	; >>>>> Line:	444
	; >>>>> if(0) debugQueue(queue); 
	jmp	L_yakc_136
	; >>>>> Line:	444
	; >>>>> if(0) debugQueue(queue); 
	push	word [bp+4]
	call	debugQueue
	add	sp, 2
L_yakc_136:
	; >>>>> Line:	446
	; >>>>> traveser = taskhead; 
	mov	ax, word [taskhead]
	mov	word [bp-2], ax
	; >>>>> Line:	448
	; >>>>> while(traveser){ 
	jmp	L_yakc_138
L_yakc_137:
	; >>>>> Line:	449
	; >>>>> if(traveser->state == 4){ 
	mov	si, word [bp-2]
	add	si, 2
	cmp	byte [si], 4
	jne	L_yakc_140
	; >>>>> Line:	452
	; >>>>> if(traveser->qblocker == queue){ 
	mov	si, word [bp-2]
	add	si, 8
	mov	ax, word [bp+4]
	cmp	ax, word [si]
	jne	L_yakc_141
	; >>>>> Line:	453
	; >>>>> traveser->state = 1; 
	mov	si, word [bp-2]
	add	si, 2
	mov	byte [si], 1
	; >>>>> Line:	454
	; >>>>> traveser->qblocker = 0; 
	mov	si, word [bp-2]
	add	si, 8
	mov	word [si], 0
	; >>>>> Line:	455
	; >>>>> break; 
	jmp	L_yakc_139
L_yakc_141:
L_yakc_140:
	; >>>>> Line:	458
	; >>>>> traveser = traveser->nextTask; 
	mov	si, word [bp-2]
	add	si, 4
	mov	ax, word [si]
	mov	word [bp-2], ax
L_yakc_138:
	mov	ax, word [bp-2]
	test	ax, ax
	jne	L_yakc_137
L_yakc_139:
	; >>>>> Line:	461
	; >>>>> if (YKISRDepth == 0) { 
	mov	ax, word [YKISRDepth]
	test	ax, ax
	jne	L_yakc_142
	; >>>>> Line:	462
	; >>>>> YKScheduler(1); 
	mov	al, 1
	push	ax
	call	YKScheduler
	add	sp, 2
L_yakc_142:
	; >>>>> Line:	465
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	; >>>>> Line:	467
	; >>>>> return 1; 
	mov	ax, 1
L_yakc_131:
	mov	sp, bp
	pop	bp
	ret
L_yakc_128:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_yakc_129
	ALIGN	2
YKEventCreate:
	; >>>>> Line:	472
	; >>>>> YKEVENT *YKEventCreate(unsigned initialValue) { 
	jmp	L_yakc_144
L_yakc_145:
	; >>>>> Line:	473
	; >>>>> YKEArray[YKEIdx].value = in 
	mov	ax, word [YKEIdx]
	shl	ax, 1
	mov	si, ax
	add	si, YKEArray
	mov	ax, word [bp+4]
	mov	word [si], ax
	; >>>>> Line:	475
	; >>>>> YKEIdx++; 
	inc	word [YKEIdx]
	; >>>>> Line:	477
	; >>>>> return &YKEArray[YKEIdx-1]; 
	mov	ax, word [YKEIdx]
	dec	ax
	shl	ax, 1
	add	ax, YKEArray
L_yakc_146:
	mov	sp, bp
	pop	bp
	ret
L_yakc_144:
	push	bp
	mov	bp, sp
	jmp	L_yakc_145
	ALIGN	2
YKEventPend:
	; >>>>> Line:	480
	; >>>>> unsigned YKEventPend(YKEVENT *event, unsigned eventMask, int waitMode) { 
	jmp	L_yakc_148
L_yakc_149:
	; >>>>> Line:	482
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	483
	; >>>>> if(waitMode == 1){ 
	cmp	word [bp+8], 1
	jne	L_yakc_150
	; >>>>> Line:	484
	; >>>>> if(eventMask == event->value){ 
	mov	si, word [bp+4]
	mov	ax, word [si]
	cmp	ax, word [bp+6]
	jne	L_yakc_151
	; >>>>> Line:	485
	; >>>>> return event->value; 
	jmp	L_yakc_152
	jmp	L_yakc_153
L_yakc_151:
	; >>>>> Line:	487
	; >>>>> currentTask->state = 5; 
	mov	si, word [currentTask]
	add	si, 2
	mov	byte [si], 5
	; >>>>> Line:	488
	; >>>>> currentTask->eblocker = event; 
	mov	si, word [currentTask]
	add	si, 10
	mov	ax, word [bp+4]
	mov	word [si], ax
	; >>>>> Line:	489
	; >>>>> currentTask->eventMask = eventMask; 
	mov	si, word [currentTask]
	add	si, 12
	mov	ax, word [bp+6]
	mov	word [si], ax
	; >>>>> Line:	490
	; >>>>> currentTask->waitMode = waitMode; 
	mov	si, word [currentTask]
	add	si, 14
	mov	ax, word [bp+8]
	mov	word [si], ax
	; >>>>> Line:	491
	; >>>>> YKScheduler(1); 
	mov	al, 1
	push	ax
	call	YKScheduler
	add	sp, 2
L_yakc_153:
	jmp	L_yakc_154
L_yakc_150:
	; >>>>> Line:	496
	; >>>>> if(eventMask & event->value){ 
	mov	ax, word [bp+6]
	mov	si, word [bp+4]
	and	ax, word [si]
	je	L_yakc_155
	; >>>>> Line:	497
	; >>>>> return event- 
	mov	ax, word [si]
	jmp	L_yakc_152
	jmp	L_yakc_156
L_yakc_155:
	; >>>>> Line:	499
	; >>>>> currentTask->state = 5; 
	mov	si, word [currentTask]
	add	si, 2
	mov	byte [si], 5
	; >>>>> Line:	500
	; >>>>> currentTask->eblocker = event; 
	mov	si, word [currentTask]
	add	si, 10
	mov	ax, word [bp+4]
	mov	word [si], ax
	; >>>>> Line:	501
	; >>>>> currentTask->eventMask = eventMask; 
	mov	si, word [currentTask]
	add	si, 12
	mov	ax, word [bp+6]
	mov	word [si], ax
	; >>>>> Line:	502
	; >>>>> currentTask->waitMode = waitMode; 
	mov	si, word [currentTask]
	add	si, 14
	mov	ax, word [bp+8]
	mov	word [si], ax
	; >>>>> Line:	503
	; >>>>> YKScheduler(1); 
	mov	al, 1
	push	ax
	call	YKScheduler
	add	sp, 2
L_yakc_156:
L_yakc_154:
	; >>>>> Line:	507
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	; >>>>> Line:	508
	; >>>>> return event->value; 
	mov	si, word [bp+4]
	mov	ax, word [si]
L_yakc_152:
	mov	sp, bp
	pop	bp
	ret
L_yakc_148:
	push	bp
	mov	bp, sp
	jmp	L_yakc_149
	ALIGN	2
YKEventSet:
	; >>>>> Line:	511
	; >>>>> void YKEventSet(YKEVENT *event, unsigned eventMask) { 
	jmp	L_yakc_158
L_yakc_159:
	; >>>>> Line:	514
	; >>>>> event->value = event->value | eventMask; 
	mov	si, word [bp+4]
	mov	ax, word [si]
	or	ax, word [bp+6]
	mov	word [si], ax
	; >>>>> Line:	516
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	518
	; >>>>> traveser = taskhead; 
	mov	ax, word [taskhead]
	mov	word [bp-2], ax
	; >>>>> Line:	520
	; >>>>> while(traveser){ 
	jmp	L_yakc_161
L_yakc_160:
	; >>>>> Line:	521
	; >>>>> if(traveser->state == 5){ 
	mov	si, word [bp-2]
	add	si, 2
	cmp	byte [si], 5
	jne	L_yakc_163
	; >>>>> Line:	524
	; >>>>> if(traveser->eblocker == event){ 
	mov	si, word [bp-2]
	add	si, 10
	mov	ax, word [bp+4]
	cmp	ax, word [si]
	jne	L_yakc_164
	; >>>>> Line:	525
	; >>>>> } 
	mov	si, word [bp-2]
	add	si, 14
	cmp	word [si], 1
	jne	L_yakc_165
	; >>>>> Line:	526
	; >>>>> if(traveser->eventMask == event->value){ 
	mov	si, word [bp-2]
	add	si, 12
	mov	di, word [bp+4]
	mov	ax, word [di]
	cmp	ax, word [si]
	jne	L_yakc_166
	; >>>>> Line:	527
	; >>>>> traveser->state = 1; 
	mov	si, word [bp-2]
	add	si, 2
	mov	byte [si], 1
	; >>>>> Line:	528
	; >>>>> traveser->eblocker = 0; 
	mov	si, word [bp-2]
	add	si, 10
	mov	word [si], 0
	; >>>>> Line:	529
	; >>>>> traveser->eventMask = 0; 
	mov	si, word [bp-2]
	add	si, 12
	mov	word [si], 0
	; >>>>> Line:	530
	; >>>>> traveser->waitMode = 0; 
	mov	si, word [bp-2]
	add	si, 14
	mov	word [si], 0
L_yakc_166:
	jmp	L_yakc_167
L_yakc_165:
	; >>>>> Line:	535
	; >>>>> if(traveser->eventMask & event->value){ 
	mov	si, word [bp-2]
	add	si, 12
	mov	ax, word [si]
	mov	si, word [bp+4]
	and	ax, word [si]
	je	L_yakc_168
	; >>>>> Line:	536
	; >>>>> traveser->state = 1; 
	mov	si, word [bp-2]
	add	si, 2
	mov	byte [si], 1
	; >>>>> Line:	537
	; >>>>> traveser->eblocker = 0; 
	mov	si, word [bp-2]
	add	si, 10
	mov	word [si], 0
	; >>>>> Line:	538
	; >>>>> traveser->eventMask = 0; 
	mov	si, word [bp-2]
	add	si, 12
	mov	word [si], 0
	; >>>>> Line:	539
	; >>>>> traveser->waitMode = 0; 
	mov	si, word [bp-2]
	add	si, 14
	mov	word [si], 0
L_yakc_168:
L_yakc_167:
L_yakc_164:
L_yakc_163:
	; >>>>> Line:	544
	; >>>>>  
	mov	si, word [bp-2]
	add	si, 4
	mov	ax, word [si]
	mov	word [bp-2], ax
L_yakc_161:
	mov	ax, word [bp-2]
	test	ax, ax
	jne	L_yakc_160
L_yakc_162:
	; >>>>> Line:	547
	; >>>>> if (YKISRDepth == 0) { 
	mov	ax, word [YKISRDepth]
	test	ax, ax
	jne	L_yakc_169
	; >>>>> Line:	548
	; >>>>> YKScheduler(1); 
	mov	al, 1
	push	ax
	call	YKScheduler
	add	sp, 2
L_yakc_169:
	; >>>>> Line:	550
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	mov	sp, bp
	pop	bp
	ret
L_yakc_158:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_yakc_159
	ALIGN	2
YKEventReset:
	; >>>>> Line:	553
	; >>>>> void YKEventReset(YKEVENT *event, unsigned eventMask) { 
	jmp	L_yakc_171
L_yakc_172:
	; >>>>> Line:	554
	; >>>>> event->value = event->value & (~eventMask); 
	mov	ax, word [bp+6]
	not	ax
	mov	si, word [bp+4]
	and	ax, word [si]
	mov	word [si], ax
	mov	sp, bp
	pop	bp
	ret
L_yakc_171:
	push	bp
	mov	bp, sp
	jmp	L_yakc_172
	ALIGN	2
taskhead:
	TIMES	2 db 0
nextTask:
	TIMES	2 db 0
TCBArray:
	TIMES	180 db 0
SEMArray:
	TIMES	128 db 0
YKQArray:
	TIMES	80 db 0
YKEArray:
	TIMES	16 db 0
YKIdleStk:
	TIMES	512 db 0
