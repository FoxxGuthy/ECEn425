; Generated by c86 (BYU-NASM) 5.1 (beta) from yakc.i
	CPU	8086
	ALIGN	2
	jmp	main	; Jump to program start
	ALIGN	2
YKCtxSwCount:
	DW	0
YKIdleCount:
	DW	0
YKTickNum:
	DW	0
currentTask:
	DW	0
YKKernalStarted:
	DB	0
	ALIGN	2
TCBIdx:
	DW	0
L_yakc_1:
	DB	"IN YKINITIALIZE",0
	ALIGN	2
YKInitialize:
	; >>>>> Line:	44
	; >>>>> void YKInitialize(void){ 
	jmp	L_yakc_2
L_yakc_3:
	; >>>>> Line:	47
	; >>>>> printString("IN YKINITIALIZE"); 
	mov	ax, L_yakc_1
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	48
	; >>>>> YKNewTask(YKIdleTask, (void *)&YKIdleStk[256], 100); 
	mov	al, 100
	push	ax
	mov	ax, (YKIdleStk+512)
	push	ax
	mov	ax, YKIdleTask
	push	ax
	call	YKNewTask
	add	sp, 6
	; >>>>> Line:	51
	; >>>>> currentTask = &TCBArray[0]; 
	mov	word [currentTask], TCBArray
	mov	sp, bp
	pop	bp
	ret
L_yakc_2:
	push	bp
	mov	bp, sp
	jmp	L_yakc_3
L_yakc_5:
	DB	"IN YKIdleTask",0
	ALIGN	2
YKIdleTask:
	; >>>>> Line:	55
	; >>>>> void YKIdleTask(void){ 
	jmp	L_yakc_6
L_yakc_7:
	; >>>>> Line:	56
	; >>>>> printString("IN YKIdleTask"); 
	mov	ax, L_yakc_5
	push	ax
	call	printString
	add	sp, 2
	mov	sp, bp
	pop	bp
	ret
L_yakc_6:
	push	bp
	mov	bp, sp
	jmp	L_yakc_7
	ALIGN	2
YKNewTask:
	; >>>>> Line:	59
	; >>>>> khead = &TCBArray 
	jmp	L_yakc_9
L_yakc_10:
	; >>>>> Line:	62
	; >>>>> TCBArray[TCBIdx].state = 1; 
	mov	ax, word [TCBIdx]
	mov	cx, 3
	shl	ax, cl
	add	ax, TCBArray
	mov	si, ax
	add	si, 2
	mov	byte [si], 1
	; >>>>> Line:	63
	; >>>>> TCBArray[TCBIdx].priority = priority; 
	mov	ax, word [TCBIdx]
	mov	cx, 3
	shl	ax, cl
	add	ax, TCBArray
	mov	si, ax
	add	si, 3
	mov	al, byte [bp+8]
	mov	byte [si], al
	; >>>>> Line:	65
	; >>>>> TCBArray[TCBIdx].delayCount = 0; 
	mov	ax, word [TCBIdx]
	mov	cx, 3
	shl	ax, cl
	add	ax, TCBArray
	mov	si, ax
	add	si, 6
	mov	word [si], 0
	; >>>>> Line:	67
	; >>>>> newSP = (unsigned *) taskStack - 11; 
	mov	ax, word [bp+6]
	sub	ax, 22
	mov	word [bp-2], ax
	; >>>>> Line:	82
	; >>>>> newSP[0] = 0; 
	mov	si, word [bp-2]
	mov	word [si], 0
	; >>>>> Line:	83
	; >>>>> newSP[1] = 0; 
	mov	si, word [bp-2]
	add	si, 2
	mov	word [si], 0
	; >>>>> Line:	84
	; >>>>> newSP[2] = 0; 
	mov	si, word [bp-2]
	add	si, 4
	mov	word [si], 0
	; >>>>> Line:	85
	; >>>>> newSP[3] = 0; 
	mov	si, word [bp-2]
	add	si, 6
	mov	word [si], 0
	; >>>>> Line:	86
	; >>>>> newSP[4] = 0; 
	mov	si, word [bp-2]
	add	si, 8
	mov	word [si], 0
	; >>>>> Line:	87
	; >>>>> newSP[5] = 0; 
	mov	si, word [bp-2]
	add	si, 10
	mov	word [si], 0
	; >>>>> Line:	88
	; >>>>> newSP[6] = 0; 
	mov	si, word [bp-2]
	add	si, 12
	mov	word [si], 0
	; >>>>> Line:	89
	; >>>>> newSP[7] = 0; 
	mov	si, word [bp-2]
	add	si, 14
	mov	word [si], 0
	; >>>>> Line:	90
	; >>>>> newSP[7] = 0; 
	mov	si, word [bp-2]
	add	si, 14
	mov	word [si], 0
	; >>>>> Line:	91
	; >>>>> newSP[8] = (unsigned) task; 
	mov	si, word [bp-2]
	add	si, 16
	mov	ax, word [bp+4]
	mov	word [si], ax
	; >>>>> Line:	92
	; >>>>> newSP[9] = 0; 
	mov	si, word [bp-2]
	add	si, 18
	mov	word [si], 0
	; >>>>> Line:	93
	; >>>>> newSP[10] = 0x0200; 
	mov	si, word [bp-2]
	add	si, 20
	mov	word [si], 512
	; >>>>> Line:	95
	; >>>>> TCBArray[TCBIdx].sp = newSP-1; 
	mov	ax, word [bp-2]
	sub	ax, 2
	mov	dx, word [TCBIdx]
	mov	cx, 3
	shl	dx, cl
	mov	si, dx
	add	si, TCBArray
	mov	word [si], ax
	; >>>>> Line:	98
	; >>>>> if(TCBIdx == 0){ 
	mov	ax, word [TCBIdx]
	test	ax, ax
	jne	L_yakc_11
	; >>>>> Line:	99
	; >>>>> taskhead = &TCBArray 
	mov	ax, word [TCBIdx]
	mov	cx, 3
	shl	ax, cl
	add	ax, TCBArray
	mov	word [taskhead], ax
	; >>>>> Line:	100
	; >>>>> TCBArray[TCBIdx].nextTask = 0; 
	mov	ax, word [TCBIdx]
	mov	cx, 3
	shl	ax, cl
	add	ax, TCBArray
	mov	si, ax
	add	si, 4
	mov	word [si], 0
	jmp	L_yakc_12
L_yakc_11:
	; >>>>> Line:	104
	; >>>>> if(priority < taskhead->priority){ 
	mov	si, word [taskhead]
	add	si, 3
	mov	al, byte [bp+8]
	cmp	al, byte [si]
	jae	L_yakc_13
	; >>>>> Line:	106
	; >>>>> TCBArray[TCBIdx].nextTask = taskhead; 
	mov	ax, word [TCBIdx]
	mov	cx, 3
	shl	ax, cl
	add	ax, TCBArray
	mov	si, ax
	add	si, 4
	mov	ax, word [taskhead]
	mov	word [si], ax
	; >>>>> Line:	107
	; >>>>> taskhead = &TCBArray[TCBIdx]; 
	mov	ax, word [TCBIdx]
	mov	cx, 3
	shl	ax, cl
	add	ax, TCBArray
	mov	word [taskhead], ax
	jmp	L_yakc_14
L_yakc_13:
	; >>>>> Line:	110
	; >>>>> traveser = taskhead; 
	mov	ax, word [taskhead]
	mov	word [bp-4], ax
	; >>>>> Line:	112
	; >>>>> while(traveser){ 
	jmp	L_yakc_16
L_yakc_15:
	; >>>>> Line:	113
	; >>>>> if(priority < traveser->nextTask->priority){ 
	mov	si, word [bp-4]
	add	si, 4
	mov	si, word [si]
	add	si, 3
	mov	al, byte [bp+8]
	cmp	al, byte [si]
	jae	L_yakc_18
	; >>>>> Line:	114
	; >>>>> TCBArray[TCBIdx].nextTask = traveser->nextTask; 
	mov	si, word [bp-4]
	add	si, 4
	mov	ax, word [TCBIdx]
	mov	cx, 3
	shl	ax, cl
	add	ax, TCBArray
	mov	di, ax
	add	di, 4
	mov	ax, word [si]
	mov	word [di], ax
	; >>>>> Line:	115
	; >>>>> traveser->nextTask = &TCBArray[TCBIdx]; 
	mov	ax, word [TCBIdx]
	mov	cx, 3
	shl	ax, cl
	add	ax, TCBArray
	mov	si, word [bp-4]
	add	si, 4
	mov	word [si], ax
	; >>>>> Line:	116
	; >>>>> break; 
	jmp	L_yakc_17
L_yakc_18:
	; >>>>> Line:	118
	; >>>>> traveser = traveser->nextTask; 
	mov	si, word [bp-4]
	add	si, 4
	mov	ax, word [si]
	mov	word [bp-4], ax
L_yakc_16:
	mov	ax, word [bp-4]
	test	ax, ax
	jne	L_yakc_15
L_yakc_17:
L_yakc_14:
L_yakc_12:
	; >>>>> Line:	123
	; >>>>> TCBIdx++; 
	inc	word [TCBIdx]
	; >>>>> Line:	124
	; >>>>> dumpLists(); 
	call	dumpLists
	mov	sp, bp
	pop	bp
	ret
L_yakc_9:
	push	bp
	mov	bp, sp
	sub	sp, 4
	jmp	L_yakc_10
L_yakc_23:
	DB	"] ",0
L_yakc_22:
	DB	",",0
L_yakc_21:
	DB	"[",0
L_yakc_20:
	DB	"TCBList: ",0
	ALIGN	2
dumpLists:
	; >>>>> Line:	127
	; >>>>> void dumpLists(){ 
	jmp	L_yakc_24
L_yakc_25:
	; >>>>> Line:	129
	; >>>>> traveser = taskhead; 
	mov	ax, word [taskhead]
	mov	word [bp-2], ax
	; >>>>> Line:	130
	; >>>>> printNewLine(); 
	call	printNewLine
	; >>>>> Line:	131
	; >>>>> printString("TCBList: "); 
	mov	ax, L_yakc_20
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	132
	; >>>>> while(traveser){ 
	jmp	L_yakc_27
L_yakc_26:
	; >>>>> Line:	133
	; >>>>> printString("["); 
	mov	ax, L_yakc_21
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	134
	; >>>>> printInt(traveser->priority); 
	mov	si, word [bp-2]
	add	si, 3
	mov	al, byte [si]
	xor	ah, ah
	push	ax
	call	printInt
	add	sp, 2
	; >>>>> Line:	135
	; >>>>> printString(","); 
	mov	ax, L_yakc_22
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	136
	; >>>>> printInt(traveser->state); 
	mov	si, word [bp-2]
	add	si, 2
	mov	al, byte [si]
	xor	ah, ah
	push	ax
	call	printInt
	add	sp, 2
	; >>>>> Line:	137
	; >>>>> printString(","); 
	mov	ax, L_yakc_22
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	138
	; >>>>> printInt(traveser->delayCount); 
	mov	si, word [bp-2]
	add	si, 6
	push	word [si]
	call	printInt
	add	sp, 2
	; >>>>> Line:	139
	; >>>>> printString("] "); 
	mov	ax, L_yakc_23
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	141
	; >>>>> traveser = traveser->nextTask; 
	mov	si, word [bp-2]
	add	si, 4
	mov	ax, word [si]
	mov	word [bp-2], ax
L_yakc_27:
	mov	ax, word [bp-2]
	test	ax, ax
	jne	L_yakc_26
L_yakc_28:
	; >>>>> Line:	144
	; >>>>> printNewLine(); 
	call	printNewLine
	mov	sp, bp
	pop	bp
	ret
L_yakc_24:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_yakc_25
L_yakc_30:
	DB	"IN YKRun",0
	ALIGN	2
YKRun:
	; >>>>> Line:	147
	; >>>>> void YKRun(void){ 
	jmp	L_yakc_31
L_yakc_32:
	; >>>>> Line:	148
	; >>>>> printString("IN YKRun"); 
	mov	ax, L_yakc_30
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	149
	; >>>>> printNewLine(); 
	call	printNewLine
	; >>>>> Line:	151
	; >>>>> YKKernalStarted = 1; 
	mov	byte [YKKernalStarted], 1
	; >>>>> Line:	153
	; >>>>> YKScheduler(); 
	call	YKScheduler
	mov	sp, bp
	pop	bp
	ret
L_yakc_31:
	push	bp
	mov	bp, sp
	jmp	L_yakc_32
L_yakc_34:
	DB	"IN YKScheduler",0
	ALIGN	2
YKScheduler:
	; >>>>> Line:	156
	; >>>>> void YKScheduler(void){ 
	jmp	L_yakc_35
L_yakc_36:
	; >>>>> Line:	158
	; >>>>> traveser = taskhead; 
	mov	ax, word [taskhead]
	mov	word [bp-2], ax
	; >>>>> Line:	159
	; >>>>> printS 
	mov	ax, L_yakc_34
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	160
	; >>>>> printNewLine(); 
	call	printNewLine
	; >>>>> Line:	161
	; >>>>> while(traveser){ 
	jmp	L_yakc_38
L_yakc_37:
	; >>>>> Line:	162
	; >>>>> if(traveser->state == 1){ 
	mov	si, word [bp-2]
	add	si, 2
	cmp	byte [si], 1
	jne	L_yakc_40
	; >>>>> Line:	163
	; >>>>> nextTask = traveser; 
	mov	ax, word [bp-2]
	mov	word [nextTask], ax
	; >>>>> Line:	164
	; >>>>> break; 
	jmp	L_yakc_39
L_yakc_40:
	; >>>>> Line:	166
	; >>>>> traveser = traveser->nextTask; 
	mov	si, word [bp-2]
	add	si, 4
	mov	ax, word [si]
	mov	word [bp-2], ax
L_yakc_38:
	mov	ax, word [bp-2]
	test	ax, ax
	jne	L_yakc_37
L_yakc_39:
	; >>>>> Line:	169
	; >>>>> if(nextTask != currentTask){ 
	mov	ax, word [currentTask]
	cmp	ax, word [nextTask]
	je	L_yakc_41
	; >>>>> Line:	174
	; >>>>> YKDispatcher(); 
	call	YKDispatcher
	; >>>>> Line:	175
	; >>>>> currentTask = nextTask; 
	mov	ax, word [nextTask]
	mov	word [currentTask], ax
L_yakc_41:
	mov	sp, bp
	pop	bp
	ret
L_yakc_35:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_yakc_36
	ALIGN	2
TCBArray:
	TIMES	48 db 0
taskhead:
	TIMES	2 db 0
nextTask:
	TIMES	2 db 0
YKIdleStk:
	TIMES	512 db 0
