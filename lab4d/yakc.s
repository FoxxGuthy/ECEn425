; Generated by c86 (BYU-NASM) 5.1 (beta) from yakc.i
	CPU	8086
	ALIGN	2
	jmp	main	; Jump to program start
	ALIGN	2
YKISRDepth:
	DW	0
YKCtxSwCount:
	DW	0
YKIdleCount:
	DW	0
YKTickNum:
	DW	0
currentTask:
	DW	0
taskSaveCTX:
	DW	0
YKKernalStarted:
	DB	0
	ALIGN	2
TCBIdx:
	DW	0
	ALIGN	2
printDebug:
	; >>>>> Line:	48
	; >>>>> void printDebug(char *string) { 
	jmp	L_yakc_1
L_yakc_2:
	; >>>>> Line:	49
	; >>>>> ne 
	jmp	L_yakc_3
	; >>>>> Line:	50
	; >>>>> printString(string); 
	push	word [bp+4]
	call	printString
	add	sp, 2
	; >>>>> Line:	51
	; >>>>> printNewLine(); 
	call	printNewLine
L_yakc_3:
	mov	sp, bp
	pop	bp
	ret
L_yakc_1:
	push	bp
	mov	bp, sp
	jmp	L_yakc_2
L_yakc_5:
	DB	"IN YKINITIALIZE - CHECK",0
	ALIGN	2
YKInitialize:
	; >>>>> Line:	55
	; >>>>> void YKInitialize(void){ 
	jmp	L_yakc_6
L_yakc_7:
	; >>>>> Line:	57
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	58
	; >>>>> printDebug("IN YKINITIALIZE - CHECK"); 
	mov	ax, L_yakc_5
	push	ax
	call	printDebug
	add	sp, 2
	; >>>>> Line:	59
	; >>>>> YKNewTask(YKIdleTask, (void *)&YKIdleStk[256], 100); 
	mov	al, 100
	push	ax
	mov	ax, (YKIdleStk+512)
	push	ax
	mov	ax, YKIdleTask
	push	ax
	call	YKNewTask
	add	sp, 6
	mov	sp, bp
	pop	bp
	ret
L_yakc_6:
	push	bp
	mov	bp, sp
	jmp	L_yakc_7
	ALIGN	2
YKIdleTask:
	; >>>>> Line:	66
	; >>>>> void YKIdleTask(void){ 
	jmp	L_yakc_9
L_yakc_10:
	; >>>>> Line:	67
	; >>>>> while(1){ 
	jmp	L_yakc_12
L_yakc_11:
	; >>>>> Line:	69
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	70
	; >>>>> YKIdleCount++; 
	inc	word [YKIdleCount]
	; >>>>> Line:	71
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
L_yakc_12:
	jmp	L_yakc_11
L_yakc_13:
	mov	sp, bp
	pop	bp
	ret
L_yakc_9:
	push	bp
	mov	bp, sp
	jmp	L_yakc_10
	ALIGN	2
YKNewTask:
	; >>>>> Line:	75
	; >>>>> void YKNewTask(void (* task)(void), void *taskStack, unsigned char priority){ 
	jmp	L_yakc_15
L_yakc_16:
	; >>>>> Line:	78
	; >>>>> TCBArray[TCBIdx].state = 1; 
	mov	ax, word [TCBIdx]
	mov	cx, 3
	shl	ax, cl
	add	ax, TCBArray
	mov	si, ax
	add	si, 2
	mov	byte [si], 1
	; >>>>> Line:	79
	; >>>>> TCBArray[TCBIdx].priority = priority; 
	mov	ax, word [TCBIdx]
	mov	cx, 3
	shl	ax, cl
	add	ax, TCBArray
	mov	si, ax
	add	si, 3
	mov	al, byte [bp+8]
	mov	byte [si], al
	; >>>>> Line:	81
	; >>>>> TCBArray[TCBIdx].delayCount = 0; 
	mov	ax, word [TCBIdx]
	mov	cx, 3
	shl	ax, cl
	add	ax, TCBArray
	mov	si, ax
	add	si, 6
	mov	word [si], 0
	; >>>>> Line:	83
	; >>>>> newSP = (unsigne 
	mov	ax, word [bp+6]
	sub	ax, 22
	mov	word [bp-2], ax
	; >>>>> Line:	98
	; >>>>> newSP[0] = 0; 
	mov	si, word [bp-2]
	mov	word [si], 0
	; >>>>> Line:	99
	; >>>>> newSP[1] = 0; 
	mov	si, word [bp-2]
	add	si, 2
	mov	word [si], 0
	; >>>>> Line:	100
	; >>>>> newSP[2] = 0; 
	mov	si, word [bp-2]
	add	si, 4
	mov	word [si], 0
	; >>>>> Line:	101
	; >>>>> newSP[3] = 0; 
	mov	si, word [bp-2]
	add	si, 6
	mov	word [si], 0
	; >>>>> Line:	102
	; >>>>> newSP[4] = 0; 
	mov	si, word [bp-2]
	add	si, 8
	mov	word [si], 0
	; >>>>> Line:	103
	; >>>>> newSP[5] = 0; 
	mov	si, word [bp-2]
	add	si, 10
	mov	word [si], 0
	; >>>>> Line:	104
	; >>>>> newSP[6] = 0; 
	mov	si, word [bp-2]
	add	si, 12
	mov	word [si], 0
	; >>>>> Line:	105
	; >>>>> newSP[7] = 0; 
	mov	si, word [bp-2]
	add	si, 14
	mov	word [si], 0
	; >>>>> Line:	106
	; >>>>> newSP[7] = 0; 
	mov	si, word [bp-2]
	add	si, 14
	mov	word [si], 0
	; >>>>> Line:	107
	; >>>>> newSP[8] = (unsigned) task; 
	mov	si, word [bp-2]
	add	si, 16
	mov	ax, word [bp+4]
	mov	word [si], ax
	; >>>>> Line:	108
	; >>>>> newSP[9] = 0; 
	mov	si, word [bp-2]
	add	si, 18
	mov	word [si], 0
	; >>>>> Line:	109
	; >>>>> newSP[10] = 0x0200; 
	mov	si, word [bp-2]
	add	si, 20
	mov	word [si], 512
	; >>>>> Line:	111
	; >>>>> TCBArray[TCBIdx].sp = newSP-1; 
	mov	ax, word [bp-2]
	sub	ax, 2
	mov	dx, word [TCBIdx]
	mov	cx, 3
	shl	dx, cl
	mov	si, dx
	add	si, TCBArray
	mov	word [si], ax
	; >>>>> Line:	114
	; >>>>> if(TCBIdx == 0){ 
	mov	ax, word [TCBIdx]
	test	ax, ax
	jne	L_yakc_17
	; >>>>> Line:	115
	; >>>>> taskhead = &TCBArray[TCBIdx]; 
	mov	ax, word [TCBIdx]
	mov	cx, 3
	shl	ax, cl
	add	ax, TCBArray
	mov	word [taskhead], ax
	; >>>>> Line:	116
	; >>>>> TCBArray[TCBIdx].nextTask = 0; 
	mov	ax, word [TCBIdx]
	mov	cx, 3
	shl	ax, cl
	add	ax, TCBArray
	mov	si, ax
	add	si, 4
	mov	word [si], 0
	jmp	L_yakc_18
L_yakc_17:
	; >>>>> Line:	120
	; >>>>> if(priority < taskhead->priority){ 
	mov	si, word [taskhead]
	add	si, 3
	mov	al, byte [bp+8]
	cmp	al, byte [si]
	jae	L_yakc_19
	; >>>>> Line:	122
	; >>>>> TCBArray[TCBIdx].nextTask = taskhead; 
	mov	ax, word [TCBIdx]
	mov	cx, 3
	shl	ax, cl
	add	ax, TCBArray
	mov	si, ax
	add	si, 4
	mov	ax, word [taskhead]
	mov	word [si], ax
	; >>>>> Line:	123
	; >>>>> taskhead = &TCBArray[TCBIdx]; 
	mov	ax, word [TCBIdx]
	mov	cx, 3
	shl	ax, cl
	add	ax, TCBArray
	mov	word [taskhead], ax
	jmp	L_yakc_20
L_yakc_19:
	; >>>>> Line:	126
	; >>>>>  
	mov	ax, word [taskhead]
	mov	word [bp-4], ax
	; >>>>> Line:	128
	; >>>>> while(traveser){ 
	jmp	L_yakc_22
L_yakc_21:
	; >>>>> Line:	129
	; >>>>> if(priority < traveser->nextTask->priority){ 
	mov	si, word [bp-4]
	add	si, 4
	mov	si, word [si]
	add	si, 3
	mov	al, byte [bp+8]
	cmp	al, byte [si]
	jae	L_yakc_24
	; >>>>> Line:	130
	; >>>>> TCBArray[TCBIdx].nextTask = traveser->nextTask; 
	mov	si, word [bp-4]
	add	si, 4
	mov	ax, word [TCBIdx]
	mov	cx, 3
	shl	ax, cl
	add	ax, TCBArray
	mov	di, ax
	add	di, 4
	mov	ax, word [si]
	mov	word [di], ax
	; >>>>> Line:	131
	; >>>>> traveser->nextTask = &TCBArray[TCBIdx]; 
	mov	ax, word [TCBIdx]
	mov	cx, 3
	shl	ax, cl
	add	ax, TCBArray
	mov	si, word [bp-4]
	add	si, 4
	mov	word [si], ax
	; >>>>> Line:	132
	; >>>>> break; 
	jmp	L_yakc_23
L_yakc_24:
	; >>>>> Line:	134
	; >>>>> traveser = traveser->nextTask; 
	mov	si, word [bp-4]
	add	si, 4
	mov	ax, word [si]
	mov	word [bp-4], ax
L_yakc_22:
	mov	ax, word [bp-4]
	test	ax, ax
	jne	L_yakc_21
L_yakc_23:
L_yakc_20:
L_yakc_18:
	; >>>>> Line:	139
	; >>>>> TCBIdx++; 
	inc	word [TCBIdx]
	; >>>>> Line:	140
	; >>>>> dumpLists(); 
	call	dumpLists
	; >>>>> Line:	142
	; >>>>> if(YKKernalStarted == 1){ 
	cmp	byte [YKKernalStarted], 1
	jne	L_yakc_25
	; >>>>> Line:	143
	; >>>>> YKScheduler(1); 
	mov	al, 1
	push	ax
	call	YKScheduler
	add	sp, 2
L_yakc_25:
	mov	sp, bp
	pop	bp
	ret
L_yakc_15:
	push	bp
	mov	bp, sp
	sub	sp, 4
	jmp	L_yakc_16
L_yakc_30:
	DB	"] ",0
L_yakc_29:
	DB	",",0
L_yakc_28:
	DB	"[",0
L_yakc_27:
	DB	"TCBList: ",0
	ALIGN	2
dumpLists:
	; >>>>> Line:	148
	; >>>>> void dumpLists(){ 
	jmp	L_yakc_31
L_yakc_32:
	; >>>>> Line:	150
	; >>>>> traveser = taskhead; 
	mov	ax, word [taskhead]
	mov	word [bp-2], ax
	; >>>>> Line:	151
	; >>>>> printNewLine(); 
	call	printNewLine
	; >>>>> Line:	152
	; >>>>> printString("TCBList: "); 
	mov	ax, L_yakc_27
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	153
	; >>>>> while(traveser){ 
	jmp	L_yakc_34
L_yakc_33:
	; >>>>> Line:	154
	; >>>>> printString("["); 
	mov	ax, L_yakc_28
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	155
	; >>>>> printInt(traveser->priority); 
	mov	si, word [bp-2]
	add	si, 3
	mov	al, byte [si]
	xor	ah, ah
	push	ax
	call	printInt
	add	sp, 2
	; >>>>> Line:	156
	; >>>>> } 
	mov	ax, L_yakc_29
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	157
	; >>>>> printInt(traveser->state); 
	mov	si, word [bp-2]
	add	si, 2
	mov	al, byte [si]
	xor	ah, ah
	push	ax
	call	printInt
	add	sp, 2
	; >>>>> Line:	158
	; >>>>> printString(","); 
	mov	ax, L_yakc_29
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	159
	; >>>>> printInt(traveser->delayCount); 
	mov	si, word [bp-2]
	add	si, 6
	push	word [si]
	call	printInt
	add	sp, 2
	; >>>>> Line:	160
	; >>>>> printString("] "); 
	mov	ax, L_yakc_30
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	162
	; >>>>> traveser = traveser->nextTask; 
	mov	si, word [bp-2]
	add	si, 4
	mov	ax, word [si]
	mov	word [bp-2], ax
L_yakc_34:
	mov	ax, word [bp-2]
	test	ax, ax
	jne	L_yakc_33
L_yakc_35:
	; >>>>> Line:	165
	; >>>>> printNewLine(); 
	call	printNewLine
	mov	sp, bp
	pop	bp
	ret
L_yakc_31:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_yakc_32
L_yakc_37:
	DB	"IN YKRun",0
	ALIGN	2
YKRun:
	; >>>>> Line:	168
	; >>>>> void YKRun(void){ 
	jmp	L_yakc_38
L_yakc_39:
	; >>>>> Line:	169
	; >>>>> printDebug("IN YKRun"); 
	mov	ax, L_yakc_37
	push	ax
	call	printDebug
	add	sp, 2
	; >>>>> Line:	171
	; >>>>> YKKernalStarted = 1; 
	mov	byte [YKKernalStarted], 1
	; >>>>> Line:	173
	; >>>>> YKScheduler(0); 
	xor	al, al
	push	ax
	call	YKScheduler
	add	sp, 2
	mov	sp, bp
	pop	bp
	ret
L_yakc_38:
	push	bp
	mov	bp, sp
	jmp	L_yakc_39
L_yakc_42:
	DB	"Calling Dispatcher to dispatch task with priority ",0
L_yakc_41:
	DB	"IN YKScheduler",0
	ALIGN	2
YKScheduler:
	; >>>>> Line:	176
	; >>>>> void YKScheduler(char saveCTX){ 
	jmp	L_yakc_43
L_yakc_44:
	; >>>>> Line:	179
	; >>>>> traveser = taskhead; 
	mov	ax, word [taskhead]
	mov	word [bp-2], ax
	; >>>>> Line:	180
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	181
	; >>>>> printDebug("IN YKScheduler"); 
	mov	ax, L_yakc_41
	push	ax
	call	printDebug
	add	sp, 2
	; >>>>> Line:	182
	; >>>>> while(traveser){ 
	jmp	L_yakc_46
L_yakc_45:
	; >>>>> Line:	183
	; >>>>> if(traveser->state == 1){ 
	mov	si, word [bp-2]
	add	si, 2
	cmp	byte [si], 1
	jne	L_yakc_48
	; >>>>> Line:	184
	; >>>>> nextTask = traveser; 
	mov	ax, word [bp-2]
	mov	word [nextTask], ax
	; >>>>> Line:	185
	; >>>>> break; 
	jmp	L_yakc_47
L_yakc_48:
	; >>>>> Line:	187
	; >>>>> traveser = traveser->nextTask; 
	mov	si, word [bp-2]
	add	si, 4
	mov	ax, word [si]
	mov	word [bp-2], ax
L_yakc_46:
	mov	ax, word [bp-2]
	test	ax, ax
	jne	L_yakc_45
L_yakc_47:
	; >>>>> Line:	190
	; >>>>> if(nextTask != currentTask){ 
	mov	ax, word [currentTask]
	cmp	ax, word [nextTask]
	je	L_yakc_49
	; >>>>> Line:	191
	; >>>>> YKCtxSwCount++; 
	inc	word [YKCtxSwCount]
	; >>>>> Line:	192
	; >>>>> taskSaveCTX = currentTask; 
	mov	ax, word [currentTask]
	mov	word [taskSaveCTX], ax
	; >>>>> Line:	193
	; >>>>> currentTask = nextTask; 
	mov	ax, word [nextTask]
	mov	word [currentTask], ax
	; >>>>> Line:	194
	; >>>>> if(0){ 
	jmp	L_yakc_50
	; >>>>> Line:	195
	; >>>>> printString("Calling Dispatcher to dispatch task with priority "); 
	mov	ax, L_yakc_42
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	196
	; >>>>> printInt(nextTask->priority); 
	mov	si, word [nextTask]
	add	si, 3
	mov	al, byte [si]
	xor	ah, ah
	push	ax
	call	printInt
	add	sp, 2
	; >>>>> Line:	197
	; >>>>> printNewLine(); 
	call	printNewLine
L_yakc_50:
	; >>>>> Line:	199
	; >>>>> YKDispatcher(saveCTX); 
	push	word [bp+4]
	call	YKDispatcher
	add	sp, 2
L_yakc_49:
	mov	sp, bp
	pop	bp
	ret
L_yakc_43:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_yakc_44
	ALIGN	2
YKDelayTask:
	; >>>>> Line:	205
	; >>>>> void YKDelayTask(unsigned newDelayCount) { 
	jmp	L_yakc_52
L_yakc_53:
	; >>>>> Line:	208
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	209
	; >>>>> if(newDelayCount == 0){ 
	mov	ax, word [bp+4]
	test	ax, ax
	jne	L_yakc_54
	; >>>>> Line:	210
	; >>>>> return ; 
	jmp	L_yakc_55
L_yakc_54:
	; >>>>> Line:	212
	; >>>>> currentTask->delayCount = newDelayCount; 
	mov	si, word [currentTask]
	add	si, 6
	mov	ax, word [bp+4]
	mov	word [si], ax
	; >>>>> Line:	213
	; >>>>> currentTask->state = 0; 
	mov	si, word [currentTask]
	add	si, 2
	mov	byte [si], 0
	; >>>>> Line:	215
	; >>>>> YKScheduler(1); 
	mov	al, 1
	push	ax
	call	YKScheduler
	add	sp, 2
	; >>>>> Line:	216
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
L_yakc_55:
	mov	sp, bp
	pop	bp
	ret
L_yakc_52:
	push	bp
	mov	bp, sp
	jmp	L_yakc_53
	ALIGN	2
YKEnterISR:
	; >>>>> Line:	220
	; >>>>> void YKEnterISR(void) { 
	jmp	L_yakc_57
L_yakc_58:
	; >>>>> Line:	222
	; >>>>> = 1; 
	inc	word [YKISRDepth]
	mov	sp, bp
	pop	bp
	ret
L_yakc_57:
	push	bp
	mov	bp, sp
	jmp	L_yakc_58
	ALIGN	2
YKExitISR:
	; >>>>> Line:	225
	; >>>>> void YKExitISR(void) { 
	jmp	L_yakc_60
L_yakc_61:
	; >>>>> Line:	228
	; >>>>> YKISRDepth--; 
	dec	word [YKISRDepth]
	; >>>>> Line:	229
	; >>>>> if (YKISRDepth == 0) { 
	mov	ax, word [YKISRDepth]
	test	ax, ax
	jne	L_yakc_62
	; >>>>> Line:	230
	; >>>>> YKScheduler(1); 
	mov	al, 1
	push	ax
	call	YKScheduler
	add	sp, 2
	; >>>>> Line:	231
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
L_yakc_62:
	mov	sp, bp
	pop	bp
	ret
L_yakc_60:
	push	bp
	mov	bp, sp
	jmp	L_yakc_61
L_yakc_66:
	DB	"SOMETHING HAS GONE HORRIBLY WRONG -- TASK HAS DELAY COUNT < 0. Priority: ",0
L_yakc_65:
	DB	"task now READY with priority ",0
L_yakc_64:
	DB	"IN YKTickHandler",0
	ALIGN	2
YKTickHandler:
	; >>>>> Line:	235
	; >>>>> void YKTickHandler(void) { 
	jmp	L_yakc_67
L_yakc_68:
	; >>>>> Line:	241
	; >>>>> traveser = taskhead; 
	mov	ax, word [taskhead]
	mov	word [bp-2], ax
	; >>>>> Line:	243
	; >>>>> YKTickNum++; 
	inc	word [YKTickNum]
	; >>>>> Line:	244
	; >>>>> printDebug("IN YKTickHandler"); 
	mov	ax, L_yakc_64
	push	ax
	call	printDebug
	add	sp, 2
	; >>>>> Line:	245
	; >>>>> while(traveser){ 
	jmp	L_yakc_70
L_yakc_69:
	; >>>>> Line:	246
	; >>>>> if(traveser->state == 0){ 
	mov	si, word [bp-2]
	add	si, 2
	mov	al, byte [si]
	test	al, al
	jne	L_yakc_72
	; >>>>> Line:	247
	; >>>>> traveser->delayCount--; 
	mov	si, word [bp-2]
	add	si, 6
	dec	word [si]
	; >>>>> Line:	249
	; >>>>> if(traveser->delayCount == 0){ 
	mov	si, word [bp-2]
	add	si, 6
	mov	ax, word [si]
	test	ax, ax
	jne	L_yakc_73
	; >>>>> Line:	251
	; >>>>> if(0 == 1){ 
	jmp	L_yakc_74
	; >>>>> Line:	252
	; >>>>> printString("task now READY with priority "); 
	mov	ax, L_yakc_65
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	253
	; >>>>> printInt(traveser->priority); 
	mov	si, word [bp-2]
	add	si, 3
	mov	al, byte [si]
	xor	ah, ah
	push	ax
	call	printInt
	add	sp, 2
	; >>>>> Line:	254
	; >>>>> printNewLine(); 
	call	printNewLine
L_yakc_74:
	; >>>>> Line:	257
	; >>>>> traveser->state = 1; 
	mov	si, word [bp-2]
	add	si, 2
	mov	byte [si], 1
L_yakc_73:
	; >>>>> Line:	260
	; >>>>>  
	mov	si, word [bp-2]
	add	si, 6
	cmp	word [si], 0
	jge	L_yakc_75
	; >>>>> Line:	261
	; >>>>> printString("SOMETHING HAS GONE HORRIBLY WRONG -- TASK HAS DELAY COUNT < 0. Priority: "); 
	mov	ax, L_yakc_66
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	262
	; >>>>> printInt(traveser->priority); 
	mov	si, word [bp-2]
	add	si, 3
	mov	al, byte [si]
	xor	ah, ah
	push	ax
	call	printInt
	add	sp, 2
	; >>>>> Line:	263
	; >>>>> printNewLine(); 
	call	printNewLine
L_yakc_75:
L_yakc_72:
	; >>>>> Line:	267
	; >>>>> traveser = traveser->nextTask; 
	mov	si, word [bp-2]
	add	si, 4
	mov	ax, word [si]
	mov	word [bp-2], ax
L_yakc_70:
	mov	ax, word [bp-2]
	test	ax, ax
	jne	L_yakc_69
L_yakc_71:
	mov	sp, bp
	pop	bp
	ret
L_yakc_67:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_yakc_68
	ALIGN	2
TCBArray:
	TIMES	48 db 0
taskhead:
	TIMES	2 db 0
nextTask:
	TIMES	2 db 0
YKIdleStk:
	TIMES	512 db 0
